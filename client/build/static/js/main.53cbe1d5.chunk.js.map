{"version":3,"sources":["redux/reducers/authReducer.js","redux/types.js","redux/reducers/postReducer.js","redux/reducers/commentReducer.js","redux/reducers/index.js","redux/sagas/authSaga.js","redux/sagas/postSaga.js","redux/sagas/commentSaga.js","redux/sagas/index.js","store.js","components/auth/LoginModal.js","components/auth/RegisterModal.js","components/MenuList.js","components/MenuListWindow.js","components/AppNavbar.js","components/spinner/Spinner.js","components/post/PostCardOne.js","components/list/Listdetail.js","components/list/Pagination.js","routes/normalRoute/PostCardList.js","components/editor/EditorConfig.js","components/editor/UploadAdapter.js","routes/normalRoute/PostWrite.js","components/comments/Comments.js","routes/normalRoute/PostDetail.js","routes/normalRoute/Search.js","routes/normalRoute/PostEdit.js","routes/normalRoute/Profile.js","routes/normalRoute/ListWrite.js","routes/normalRoute/ListWrite_visitor.js","routes/protectedRoute/ProtectedRoute.js","routes/normalRoute/List.js","components/Main_page/Main.js","routes/Router.js","App.js","components/auth/loadUser.js","index.js"],"names":["initialState","token","localStorage","getItem","isAuthenticated","isLoading","user","userId","userName","userRole","errorMsg","successMsg","previousMatchMsg","authReducer","state","action","type","setItem","payload","id","role","removeItem","data","msg","_id","name","success_msg","previousMsg","fail_msg","match_msg","posts","postDetail","postCount","loading","error","creatorId","categoryFindResult","title","searchBy","searchResult","postFindResult","creator","comments","commentReducer","createRootReducer","history","combineReducers","router","connectRouter","auth","post","postReducer","comment","loginUser","watchLoginUser","logout","watchlogout","registerUser","watchregisterUser","clearError","watchclearError","userLoading","watchuserLoading","EditPassword","watchEditPassword","authSaga","loginUserAPI","loginData","axios","headers","call","result","put","response","takeEvery","registerUserAPI","req","console","userLoadingAPI","config","get","EditPasswordAPI","all","fork","loadPosts","watchLoadPosts","uploadPosts","watchuploadPosts","uploadVisitorPosts","watchuploadVisitorPosts","loadPostDetail","watchloadPostDetail","DeletePost","watchDeletePost","PostEditLoad","watchPostEditLoad","PostEditUpload","watchPostEditUpload","CategoryFind","watchCategoryFind","SearchResult","watchSearchResult","postSaga","loadPostAPI","reverse","push","uploadPostAPI","uploadVisitorPostAPI","loadPostDetailAPI","DeletePostAPI","delete","PostEditLoadAPI","PostEditUploadAPI","CategoryFindAPI","encodeURIComponent","SearchResultAPI","loadComments","watchLoadComments","uploadComments","watchUpLoadComments","commentSaga","loadCommentsAPI","uploadCommentsAPI","rootSaga","dotenv","defaults","baseURL","process","createBrowserHistory","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSIONS_COMPOSE__","compose","store","createStore","applyMiddleware","run","LoginModal","useState","modal","setModal","localMsg","setLocalMsg","email","password","form","setValues","dispatch","useDispatch","useSelector","useEffect","e","handleToggle","onChange","target","value","className","NavLink","onClick","href","Modal","isOpen","toggle","ModalHeader","ModalBody","Alert","color","Form","onSubmit","preventDefault","FormGroup","Label","for","Input","placeholder","Button","style","marginTop","block","RegisterModal","setValue","MenuList","setIsOpen","isOpenBoard","setIsOpenBoard","isOpenCompetiton","setIsOpenCompetition","isOpenCompetiton_1","setIsOpenCompetiton_1","isOpenCompetiton_2","setIsOpenCompetiton_2","useCallback","handleToggleCompetitonClose","Plus_tap","Minus_tap","to","Collapse","MenuListWindow","AppNavbar","isWindowWidth","setWindowWidth","$","jQuery","onLogout","handleResize","innerWidth","addEventListener","authLink","NavItem","outline","guestLink","scrollTop","css","lastScrollTop","scroll","this","Math","abs","Navbar","dark","expand","NavbarToggler","navbar","Nav","GrowingSpinner","Row","Spinner","width","height","PostCardOne","Array","isArray","map","fileUrl","views","key","Card","CardImg","top","alt","src","CardBody","CardTitle","icon","faMouse","Badge","length","Listdetail","creatorName","date","Pagination","postsPerPage","totalPosts","paginate","currentPage","pageNumbers","totalList","ceil","i","floor","number","PostCardList","Helmet","editorConfiguration","plugins","Essentials","Paragraph","Bold","Code","Italic","Heading","Indent","IndentBlock","Underline","Strikethrough","BlockQuote","Font","Alignment","List","Link","MediaEmbed","PasteFromOffice","Image","ImageStyle","ImageToolbar","ImageUpload","ImageResize","SimpleUploadAdapter","Table","TableToolbar","TextTransformation","toolbar","heading","options","model","view","class","fontSize","alignment","table","contentToolbar","image","resizeUnit","styles","typing","transformations","remove","language","simpleUpload","uploadUrl","MyUploadAdapter","loader","file","then","Promise","resolve","reject","_initRequest","_initListeners","_sendRequest","xhr","abort","XMLHttpRequest","open","responseType","genericErrorText","message","default","url","upload","evt","lengthComputable","uploadTotal","total","uploaded","loaded","FormData","append","send","Myinit","editor","createUploadAdapter","PostWrite","contents","a","category","ClassicEditor","onReady","onBlur","event","getData","match","whereImg_start","indexOf","whereImg_end","ext_name_find","result_Img_Url","ext_name","substring","Col","Progress","animated","Comments","resetValue","current","useRef","innerRef","PostDetail","useLocation","params","EditButton","HomeButton","Body","categoryName","faPencilAlt","faCommentDots","BalloonEditor","disabled","Container","split","Search","searchTerm","useParams","PostEdit","defaultValue","Profile","previousPassword","rePassword","body","sm","md","size","offset","CardHeader","ListWrite","undefined","ListWrite_visitor","getDataFromCKEditor","EditProtectedRoute","Component","component","rest","render","props","pathname","from","location","ProfileProtectedRoute","addPostClick","setCurrentPage","listing","totalpage","tmp","indexOfLast","indexOfFirst","slice","Main","localNum","reload","data-hijacking","data-animation","MyRouter","path","exact","App","loadUser","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.53cbe1d5.chunk.js","sourcesContent":["import {\n  LOGIN_REQUEST,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n  CLEAR_ERROR_REQUEST,\n  CLEAR_ERROR_SUCCESS,\n  CLEAR_ERROR_FAILURE,\n  LOGOUT_REQUEST,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAILURE,\n  REGISTER_REQUEST,\n  REGISTER_SUCCESS,\n  REGISTER_FAILURE,\n  USER_LOADING_REQUEST,\n  USER_LOADING_SUCCESS,\n  USER_LOADING_FAILURE,\n  PASSWORD_EDIT_UPLOADING_REQUEST,\n  PASSWORD_EDIT_UPLOADING_SUCCESS,\n  PASSWORD_EDIT_UPLOADING_FAILURE,\n} from \"../types\";\n\n\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuthenticated: null,\n  isLoading: false,\n  user: \"\",\n  userId: \"\",\n  userName: \"\",\n  userRole: \"\",\n  errorMsg: \"\",\n  successMsg: \"\",\n  previousMatchMsg: \"\",\n};\n\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n\n\n\n\n\n\n\n\n\n    case REGISTER_REQUEST:\n    case LOGIN_REQUEST:\n    case LOGOUT_REQUEST:\n      return {\n        ...state,\n        errorMsg: \"\",\n        isLoading: true,\n      };\n\n    case REGISTER_SUCCESS:\n    case LOGIN_SUCCESS:\n      localStorage.setItem(\"token\", action.payload.token);\n      return {\n        ...state,\n        ...action.payload,\n        isAuthenticated: true,\n        isLoading: false,\n        userId: action.payload.user.id,\n        userRole: action.payload.user.role,\n        errorMsg: \"\",\n      };\n\n    case REGISTER_FAILURE:\n    case LOGIN_FAILURE:\n    case LOGOUT_FAILURE:\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        ...action.payload,\n        token: null,\n        user: null,\n        userId: null,\n        isAuthenticated: false,\n        isLoading: false,\n        userRole: null,\n        errorMsg: action.payload.data.msg,//에러 메세지\n      };\n    case LOGOUT_SUCCESS:\n      localStorage.removeItem(\"token\");\n      return {\n        token: null,\n        user: null,\n        userId: null,\n        isAuthenticated: false,\n        isLoading: false,\n        userRole: null,\n        errorMsg: \"\",\n      };\n\n\n\n\n\n\n\n\n\n\n\n\n    case USER_LOADING_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case USER_LOADING_SUCCESS:\n      return {\n        ...state,\n        isAuthenticated: true,\n        isLoading: false,\n        user: action.payload,\n        userId: action.payload._id,\n        userName: action.payload.name,\n        userRole: action.payload.role\n      };\n    case USER_LOADING_FAILURE:\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        userRole: \"\",\n        errorMsg: null,\n      };\n\n\n\n\n\n\n\n\n\n    case PASSWORD_EDIT_UPLOADING_REQUEST:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case PASSWORD_EDIT_UPLOADING_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        successMsg: action.payload.data.success_msg,\n        errorMsg: \"\",\n        previousMsg: \"\",\n      };\n    case PASSWORD_EDIT_UPLOADING_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        successMsg: \"\",\n        errorMsg: action.payload.data.fail_msg,//새로운 비밀번호가 일치하지 않습니다\n        previousMatchMsg: action.payload.data.match_msg,//비밀번호가 일치하지 않습니다.\n      };\n\n\n\n\n\n\n\n\n\n\n\n    case CLEAR_ERROR_REQUEST:\n      return {\n        ...state,\n      };\n    case CLEAR_ERROR_SUCCESS:\n      return {\n        ...state,\n        errorMsg: \"\",\n        previousMatchMsg: \"\",\n      };\n    case CLEAR_ERROR_FAILURE:\n      return {\n        ...state,\n        errorMsg: \"Clear Error Fail\",\n        previousMatchMsg: \"Clear Error Fail\",\n      };\n\n\n\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;","export const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\n// LOGOUT\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\n// CLEAR ERROR\nexport const CLEAR_ERROR_REQUEST = \"CLEAR_ERROR_REQUEST\";\nexport const CLEAR_ERROR_SUCCESS = \"CLEAR_ERROR_SUCCESS\";\nexport const CLEAR_ERROR_FAILURE = \"CLEAR_ERROR_FAILURE\";\n// CLEAR ERROR\nexport const REGISTER_REQUEST = \"REGISTER_REQUEST\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAILURE = \"REGISTER_FAILURE\";\n\n// POST WRITE\nexport const POSTS_WRITE_REQUEST = \"POST_WRITE_REQUEST\";\nexport const POSTS_WRITE_FAILURE = \"POST_WRITE_FAILURE\";\nexport const POSTS_WRITE_SUCCESS = \"POST_WRITE_SUCCESS\";\n\n// USER LOADING\nexport const POSTS_LOADING_REQUEST = \"POST_LOADING_REQUEST\";\nexport const POSTS_LOADING_FAILURE = \"POST_LOADING_FAILURE\";\nexport const POSTS_LOADING_SUCCESS = \"POST_LOADING_SUCCESS\";\n\n\nexport const USER_LOADING_REQUEST = \"USER_LOADING_REQUEST\";\nexport const USER_LOADING_FAILURE = \"USER_LOADING_FAILURE\";\nexport const USER_LOADING_SUCCESS = \"USER_LOADING_SUCCESS\";\n\n// POSTUPLOAD\nexport const POST_UPLOADING_REQUEST = \"POST_UPLOADING_REQUEST\";\nexport const POST_UPLOADING_FAILURE = \"POST_UPLOADING_FAILURE\";\nexport const POST_UPLOADING_SUCCESS = \"POST_UPLOADING_SUCCESS\";\n\n\n// POSTUPLOAD_VISITOR\nexport const POST_UPLOADING_REQUEST_VISITOR = \"POST_UPLOADING_REQUEST_VISITOR\";\nexport const POST_UPLOADING_FAILURE_VISITOR = \"POST_UPLOADING_FAILURE_VISITOR\";\nexport const POST_UPLOADING_SUCCESS_VISITOR = \"POST_UPLOADING_SUCCESS_VISITOR\";\n\n// POST Detail loading\nexport const POST_DETAIL_LOADING_REQUEST = \"POST_DETAIL_LOADING_REQUEST\";\nexport const POST_DETAIL_LOADING_FAILURE = \"POST_DETAIL_LOADING_FAILURE\";\nexport const POST_DETAIL_LOADING_SUCCESS = \"POST_DETAIL_LOADING_SUCCESS\";\n// POST DELETE\nexport const POST_DELETE_REQUEST = \"POST_DELETE_REQUEST\";\nexport const POST_DELETE_FAILURE = \"POST_DELETE_FAILURE\";\nexport const POST_DELETE_SUCCESS = \"POST_DELETE_SUCCESS\";\n\n\n// Comment loading\nexport const COMMENT_LOADING_REQUEST = \"COMMENT_LOADING_REQUEST\";\nexport const COMMENT_LOADING_FAILURE = \"COMMENT_LOADING_FAILURE\";\nexport const COMMENT_LOADING_SUCCESS = \"COMMENT_LOADING_SUCCESS\";\n\n// Comment uploading\nexport const COMMENT_UPLOADING_REQUEST = \"COMMENT_UPLOADING_REQUEST\";\nexport const COMMENT_UPLOADING_FAILURE = \"COMMENT_UPLOADING_FAILURE\";\nexport const COMMENT_UPLOADING_SUCCESS = \"COMMENT_UPLOADING_SUCCESS\";\n\n\n\n// Post Loading Edit\nexport const POST_EDIT_LOADING_REQUEST = \"POST_EDIT_LOADING_REQUEST\";\nexport const POST_EDIT_LOADING_FAILURE = \"POST_EDIT_LOADING_FAILURE\";\nexport const POST_EDIT_LOADING_SUCCESS = \"POST_EDIT_LOADING_SUCCESS\";\n\n// Post Uploading Edit\nexport const POST_EDIT_UPLOADING_REQUEST = \"POST_EDIT_UPLOADING_REQUEST\";\nexport const POST_EDIT_UPLOADING_FAILURE = \"POST_EDIT_UPLOADING_FAILURE\";\nexport const POST_EDIT_UPLOADING_SUCCESS = \"POST_EDIT_UPLOADING_SUCCESS\";\n\n\n\n\n// Post Uploading Edit\nexport const CATEGORY_FIND_REQUEST = \"CATEGORY_FIND_REQUEST\";\nexport const CATEGORY_FIND_FAILURE = \"CATEGORY_FIND_FAILURE\";\nexport const CATEGORY_FIND_SUCCESS = \"CATEGORY_FIND_SUCCESS\";\n\n\n\n\n// Post Uploading Edit\nexport const SEARCH_REQUEST = \"SEARCH_REQUEST\";\nexport const SEARCH_FAILURE = \"SEARCH_FAILURE\";\nexport const SEARCH_SUCCESS = \"SEARCH_SUCCESS\";\n\n\n\n\n\n// Password Edit\nexport const PASSWORD_EDIT_UPLOADING_REQUEST =\n    \"PASSWORD_EDIT_UPLOADING_REQUEST\";\nexport const PASSWORD_EDIT_UPLOADING_FAILURE =\n    \"PASSWORD_EDIT_UPLOADING_FAILURE\";\nexport const PASSWORD_EDIT_UPLOADING_SUCCESS =\n    \"PASSWORD_EDIT_UPLOADING_SUCCESS\";\n\n\n// Post Uploading Edit\nexport const LIST_REQUEST = \"LIST_REQUEST\";\nexport const LIST_FAILURE = \"LIST_FAILURE\";\nexport const LIST_SUCCESS = \"LIST_SUCCESS\";\n\n// Main Request\n\nexport const MAIN_REQUEST = \"MAIN_REQUEST\";\nexport const MAIN_SUCCESS = \"MAIN_SUCCESS\";\nexport const MAIN_FAILURE = \"MAIN_FAILURE\";","import {\n  POSTS_LOADING_REQUEST,\n  POSTS_LOADING_SUCCESS,\n  POSTS_LOADING_FAILURE,\n  POSTS_WRITE_REQUEST,\n  POSTS_WRITE_SUCCESS,\n  POSTS_WRITE_FAILURE,\n  POST_DETAIL_LOADING_FAILURE,\n  POST_DETAIL_LOADING_SUCCESS,\n  POST_DETAIL_LOADING_REQUEST,\n  POST_UPLOADING_REQUEST,\n  POST_UPLOADING_SUCCESS,\n  POST_UPLOADING_FAILURE,\n  POST_UPLOADING_REQUEST_VISITOR,\n  POST_UPLOADING_SUCCESS_VISITOR,\n  POST_UPLOADING_FAILURE_VISITOR,\n  POST_EDIT_LOADING_REQUEST,\n  POST_EDIT_LOADING_SUCCESS,\n  POST_EDIT_LOADING_FAILURE,\n  POST_EDIT_UPLOADING_REQUEST,\n  POST_EDIT_UPLOADING_SUCCESS,\n  POST_EDIT_UPLOADING_FAILURE,\n  CATEGORY_FIND_REQUEST,\n  CATEGORY_FIND_SUCCESS,\n  CATEGORY_FIND_FAILURE,\n  SEARCH_REQUEST,\n  SEARCH_SUCCESS,\n  SEARCH_FAILURE,\n} from \"../types\";\n\nconst initialState = {\n  isAuthenticated: null,\n  posts: [],\n  postDetail: \"\",\n  postCount: \"\",\n  loading: false,\n  error: \"\",\n  creatorId: \"\",\n  categoryFindResult: \"\",\n  title: \"\",\n  searchBy: \"\",\n  searchResult: \"\",\n  //_id: \"\"\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n\n\n    case POSTS_LOADING_REQUEST:\n      return {\n        ...state,\n        posts: [],\n        loading: true,\n      };\n    case POSTS_LOADING_SUCCESS:\n      return {\n        ...state,\n        posts: [...state.posts, ...action.payload.postFindResult],\n        categoryFindResult: action.payload.categoryFindResult,\n        loading: false,\n      };\n    case POSTS_LOADING_FAILURE:\n      return {\n        ...state,\n        loading: false,\n      };\n\n\n    case POSTS_WRITE_REQUEST:\n      return {\n        ...state,\n        posts: [],\n        loading: true,\n      };\n    case POSTS_WRITE_SUCCESS:\n      return {\n        ...state,\n        posts: action.payload,\n        loading: false,\n      };\n    case POSTS_WRITE_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n\n    //post_DEATIL_LOADING\n\n    case POST_DETAIL_LOADING_REQUEST:\n      return {\n        ...state,\n        posts: [],\n        loading: true,\n      };\n    case POST_DETAIL_LOADING_SUCCESS:\n      return {\n        ...state,\n        postDetail: action.payload,\n        creatorId: action.payload.creator._id,\n        title: action.payload.title,\n        loading: false,\n      };\n    case POST_DETAIL_LOADING_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n\n\n\n    //POST UPLOADING\n\n    case POST_UPLOADING_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case POST_UPLOADING_SUCCESS:\n      return {\n        ...state,\n        posts: action.payload,\n        isAuthenticated: true,\n        loading: false,\n      };\n    case POST_UPLOADING_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n\n\n    //POST UPLOADING_VISITOR\n\n    case POST_UPLOADING_REQUEST_VISITOR:\n      return {\n        ...state,\n        loading: true,\n      };\n    case POST_UPLOADING_SUCCESS_VISITOR:\n      return {\n        ...state,\n        posts: action.payload,\n        isAuthenticated: true,\n        loading: false,\n      };\n    case POST_UPLOADING_FAILURE_VISITOR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n\n\n    // POST_EDIT_LOADING\n\n    case POST_EDIT_LOADING_REQUEST:\n      return {\n        ...state,\n        posts: [],\n        loading: true,\n      };\n    case POST_EDIT_LOADING_SUCCESS:\n      return {\n        ...state,\n        postDetail: action.payload,\n\n        loading: false,\n      };\n    case POST_EDIT_LOADING_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n\n\n\n    // POST_EDIT_UPLOADING\n\n    case POST_EDIT_UPLOADING_REQUEST:\n      return {\n        ...state,\n\n        loading: true,\n      };\n    case POST_EDIT_UPLOADING_SUCCESS:\n      return {\n        ...state,\n        posts: action.payload,\n        isAuthenticated: true,\n        loading: false,\n      };\n    case POST_EDIT_UPLOADING_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n\n\n    case CATEGORY_FIND_REQUEST:\n      return {\n        ...state,\n        posts: [],\n        loading: true,\n      };\n    case CATEGORY_FIND_SUCCESS:\n      return {\n        ...state,\n        categoryFindResult: action.payload,\n        loading: false,\n      };\n    case CATEGORY_FIND_FAILURE:\n      return {\n        ...state,\n        categoryFindResult: action.payload,\n        loading: false,\n      };\n\n\n\n\n    case SEARCH_REQUEST:\n      return {\n        ...state,\n        posts: [],\n        searchBy: action.payload,\n        loading: true,\n      };\n    case SEARCH_SUCCESS:\n      return {\n        ...state,\n        searchBy: action.payload,\n        searchResult: action.payload,\n        loading: false,\n      };\n    case SEARCH_FAILURE:\n      return {\n        ...state,\n        searchResult: action.payload,\n        loading: false,\n      };\n\n\n\n\n    default:\n      return state;\n  }\n}","import {\r\n    COMMENT_LOADING_REQUEST,\r\n    COMMENT_LOADING_SUCCESS,\r\n    COMMENT_LOADING_FAILURE,\r\n    COMMENT_UPLOADING_REQUEST,\r\n    COMMENT_UPLOADING_SUCCESS,\r\n    COMMENT_UPLOADING_FAILURE,\r\n} from \"../types\";\r\n\r\nconst initialState = {\r\n    comments: [],\r\n    creatorId: \"\",\r\n    loading: false,\r\n    isAuthenticated: false,\r\n};\r\n\r\nconst commentReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case COMMENT_LOADING_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case COMMENT_LOADING_SUCCESS:\r\n            return {\r\n                ...state,\r\n                comments: action.payload,\r\n                loading: false,\r\n            };\r\n        case COMMENT_LOADING_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            };\r\n        case COMMENT_UPLOADING_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case COMMENT_UPLOADING_SUCCESS:\r\n            return {\r\n                ...state,\r\n                comments: [...state.comments, action.payload],\r\n                isAuthenticated: true,\r\n                loading: false,\r\n            };\r\n        case COMMENT_UPLOADING_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default commentReducer;","import { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\nimport authReducer from \"./authReducer.js\";\nimport postReducer from \"./postReducer.js\";\nimport commentReducer from \"./commentReducer.js\";\n\nconst createRootReducer = (history) =>\n  combineReducers({\n    router: connectRouter(history),\n    auth: authReducer,\n    post: postReducer,\n    comment: commentReducer,\n  });//여러개의 리듀서를 하나의 리듀서로 합쳐준다.\n\nexport default createRootReducer;\n","import axios from \"axios\";\nimport { call, put, takeEvery, all, fork } from \"redux-saga/effects\";\nimport {\n  LOGIN_FAILURE,\n  LOGIN_SUCCESS,\n  LOGIN_REQUEST,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAILURE,\n  LOGOUT_REQUEST,\n  REGISTER_SUCCESS,\n  REGISTER_FAILURE,\n  REGISTER_REQUEST,\n  CLEAR_ERROR_REQUEST,\n  CLEAR_ERROR_FAILURE,\n  CLEAR_ERROR_SUCCESS,\n  USER_LOADING_REQUEST,\n  USER_LOADING_FAILURE,\n  USER_LOADING_SUCCESS,\n  PASSWORD_EDIT_UPLOADING_SUCCESS,\n  PASSWORD_EDIT_UPLOADING_REQUEST,\n  PASSWORD_EDIT_UPLOADING_FAILURE,\n} from \"../types\";\n\n// Login\n\nconst loginUserAPI = (loginData) => {\n  // console.log(loginData, \"loginData\", \"loginUserAPI 콘솔\");\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  return axios.post(\"api/auth\", loginData, config);//axios를 통하여 로그인 신호를 준다. config를 통해 받을 데이터 타입을 정할 수 있다. json 타입\n};\n\nfunction* loginUser(action) {\n  try {\n    const result = yield call(loginUserAPI, action.payload);//반환된 값을 action.payload에 넣게 되는데 이를 result에 다시 넣는다.\n    //console.log(loginUserAPI(action.payload), \"아래와 값이 같이 나오지만 이 경우 promise 안에 들어 있다.\");\n    // console.log(result, \"loginUser 콘솔\");\n    yield put({\n      type: LOGIN_SUCCESS,\n      payload: result.data,\n    });\n  } catch (e) {\n    yield put({\n      type: LOGIN_FAILURE,\n      payload: e.response,\n    });\n  }\n}\n\nfunction* watchLoginUser() {\n  yield takeEvery(LOGIN_REQUEST, loginUser);//모든 로그인 request가 들어올 때마다 loginUser을 실행한다.\n}\n\n// LOGOUT\n\nfunction* logout(action) {\n  try {\n    yield put({\n      type: LOGOUT_SUCCESS,\n    });\n  } catch (e) {\n    yield put({\n      type: LOGOUT_FAILURE,\n    });\n    console.log(e);\n  }\n}\n\nfunction* watchlogout() {\n  yield takeEvery(LOGOUT_REQUEST, logout);\n}\n\n// Register\n\nconst registerUserAPI = (req) => {\n  // console.log(req, \"req\");\n\n  return axios.post(\"api/user\", req);\n};\n\nfunction* registerUser(action) {\n  try {\n    const result = yield call(registerUserAPI, action.payload);\n    // console.log(result, \"RegisterUser Data\");\n    yield put({\n      type: REGISTER_SUCCESS,\n      payload: result.data,\n    });\n  } catch (e) {\n    yield put({\n      type: REGISTER_FAILURE,\n      payload: e.response,\n    });\n  }\n}\n\nfunction* watchregisterUser() {\n  yield takeEvery(REGISTER_REQUEST, registerUser);\n}\n\n// clear Error\n\nfunction* clearError() {\n  try {\n    yield put({\n      type: CLEAR_ERROR_SUCCESS,\n    });\n  } catch (e) {\n    yield put({\n      type: CLEAR_ERROR_FAILURE,\n    });\n    console.error(e);\n  }\n}\n\nfunction* watchclearError() {\n  yield takeEvery(CLEAR_ERROR_REQUEST, clearError);\n}\n\n\n//userLoading\n\n\nconst userLoadingAPI = (token) => {\n  // console.log(token, \"토큰 확인중입니다.\")\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  if (token) {\n    config.headers[\"x-auth-token\"] = token\n  }\n  return axios.get(\"api/auth/user\", config);//axios를 통하여 로그인 신호를 준다. config를 통해 받을 데이터 타입을 정할 수 있다. json 타입\n};\n\nfunction* userLoading(action) {\n  try {\n    // console.log(action, \"userLoading USER_LOADING_REQUEST 잘되는중\")\n    // console.log(userLoadingAPI(action.payload, \"아래와 값이 같이 나오지만 이 경우 promise 안에 들어 있다. 패이로드 확인중\"));\n    const result = yield call(userLoadingAPI, action.payload);//반환된 값을 action.payload에 넣게 되는데 이를 result에 다시 넣는다.\n    // console.log(userLoadingAPI(action.payload, \"아래와 값이 같이 나오지만 이 경우 promise 안에 들어 있다. 패이로드 확인중\"));\n      //  console.log(result, \"userLoading 콘솔\");\n      //  console.log(action.payload, \"auth payload 확인 중\");\n    yield put({\n      type: USER_LOADING_SUCCESS,\n      payload: result.data,\n    });\n  } catch (e) {\n    yield put({\n      type: USER_LOADING_FAILURE,\n      payload: e.response,\n    });\n  }\n}\n\nfunction* watchuserLoading() {\n  yield takeEvery(USER_LOADING_REQUEST, userLoading);//모든 로그인 request가 들어올 때마다 loginUser을 실행한다.\n}\n\n\n\n\n\n\n// Edit Password\n\nconst EditPasswordAPI = (payload) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const token = payload.token;\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n  return axios.post(`/api/user/${payload.userName}/profile`, payload, config);\n};\n\nfunction* EditPassword(action) {\n  try {\n    // console.log(action, \"EditPassword\");\n    const result = yield call(EditPasswordAPI, action.payload);\n    // console.log(result);\n    // console.log(result.data);\n    // console.log(\"여기서 멈춰부렸따\");\n    yield put({\n      type: PASSWORD_EDIT_UPLOADING_SUCCESS,\n      payload: result,\n    });\n  } catch (e) {\n    console.log(e)\n    console.log(action)\n    yield put({\n      type: PASSWORD_EDIT_UPLOADING_FAILURE,\n      payload: e.response,\n    });\n  }\n}\n\nfunction* watchEditPassword() {\n  yield takeEvery(PASSWORD_EDIT_UPLOADING_REQUEST, EditPassword);\n}\n\n\n\n\n\n\n\nexport default function* authSaga() {\n  yield all([\n    fork(watchLoginUser),\n    fork(watchlogout),\n    fork(watchregisterUser),\n    fork(watchclearError),\n    fork(watchuserLoading),\n    fork(watchEditPassword),\n  ]);\n}","import axios from \"axios\";\nimport { fork } from \"redux-saga/effects\";\nimport { put, call, takeEvery, all } from \"redux-saga/effects\";\nimport { push } from \"connected-react-router\";\nimport {\n  POSTS_LOADING_FAILURE,\n  POSTS_LOADING_SUCCESS,\n  POSTS_LOADING_REQUEST,\n  POST_UPLOADING_REQUEST,\n  POST_UPLOADING_FAILURE,\n  POST_UPLOADING_SUCCESS,\n  POST_UPLOADING_REQUEST_VISITOR,\n  POST_UPLOADING_FAILURE_VISITOR,\n  POST_UPLOADING_SUCCESS_VISITOR,\n  POST_DETAIL_LOADING_SUCCESS,\n  POST_DETAIL_LOADING_FAILURE,\n  POST_DETAIL_LOADING_REQUEST,\n  POST_DELETE_SUCCESS,\n  POST_DELETE_FAILURE,\n  POST_DELETE_REQUEST,\n  POST_EDIT_LOADING_SUCCESS,\n  POST_EDIT_LOADING_FAILURE,\n  POST_EDIT_UPLOADING_SUCCESS,\n  POST_EDIT_UPLOADING_FAILURE,\n  POST_EDIT_UPLOADING_REQUEST,\n  POST_EDIT_LOADING_REQUEST,\n  CATEGORY_FIND_FAILURE,\n  CATEGORY_FIND_SUCCESS,\n  CATEGORY_FIND_REQUEST,\n  SEARCH_SUCCESS,\n  SEARCH_FAILURE,\n  SEARCH_REQUEST,\n} from \"../types\";\n\n// All Posts load\n\nconst loadPostAPI = () => {\n  return axios.get(\"/api/post\");\n};\n\nfunction* loadPosts() {\n  try {\n    const result = yield call(loadPostAPI);\n    result.data.postFindResult = result.data.postFindResult.reverse()\n    console.log(result, \"loadedPosts\");\n    console.log(\"POSTS_LOADING_SUCCESS\");\n    yield put({\n      type: POSTS_LOADING_SUCCESS,\n      payload: result.data,\n    });\n  } catch (e) {\n    yield put({\n      type: POSTS_LOADING_FAILURE,\n      payload: e,\n    });\n    yield put(push(\"/\"));\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeEvery(POSTS_LOADING_REQUEST, loadPosts);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n// Post Upload\n\nconst uploadPostAPI = (payload) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const token = payload.token;\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n    console.log(config.headers[\"x-auth-token\"], \"postsaga API configheader check\")\n  }\n  console.log(payload, \"업로드포스트에이피아이 패이로드\");\n  return axios.post(\"/api/post\", payload, config);//payload-> post내용, config -> 토큰\n};\n\nfunction* uploadPosts(action) {\n  try {\n    console.log(action, \"uploadPost function\");\n    const result = yield call(uploadPostAPI, action.payload);\n    console.log(result, \"uploadPostAPI, action.payload\");\n    yield put({\n      type: POST_UPLOADING_SUCCESS,\n      payload: result.data,\n    });\n    yield put(push(`/post/${result.data._id}`));//업로드 이후 해당 위치로 이동함\n  } catch (e) {\n    yield put({\n      type: POST_UPLOADING_FAILURE,\n      payload: e,\n    });\n    yield put(push(\"/\"));\n  }\n}\n\n\nfunction* watchuploadPosts() {\n  yield takeEvery(POST_UPLOADING_REQUEST, uploadPosts);\n}\n\n\n// post upload visitor Visitor\n\n\nconst uploadVisitorPostAPI = (payload) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const token = payload.token;\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n    console.log(config.headers[\"x-auth-token\"], \"postsaga API configheader check\")\n  }\n  console.log(payload, \"업로드포스트에이피아이 패이로드\");\n  return axios.post(\"/api/post/visitor\", payload, config);//payload-> post내용, config -> 토큰\n};\n\nfunction* uploadVisitorPosts(action) {\n  try {\n    console.log(action, \"uploadPost function\");\n    const result = yield call(uploadVisitorPostAPI, action.payload);\n    console.log(result, \"uploadPostAPI, action.payload\");\n    yield put({\n      type: POST_UPLOADING_SUCCESS_VISITOR,\n      payload: result.data,\n    });\n    yield put(push(`/post/${result.data._id}`));//업로드 이후 해당 위치로 이동함\n  } catch (e) {\n    yield put({\n      type: POST_UPLOADING_FAILURE_VISITOR,\n      payload: e,\n    });\n    yield put(push(\"/\"));\n  }\n}\n\n\nfunction* watchuploadVisitorPosts() {\n  yield takeEvery(POST_UPLOADING_REQUEST_VISITOR, uploadVisitorPosts);\n}\n\n\n\n\n// Post Detail\nconst loadPostDetailAPI = (payload) => {\n  //console.log(payload, \"로드포스트디테일에이피아이\");\n  //console.log(`${payload}`, \"한번 더 확인하자\")\n\n  return axios.get(`/api/post/${payload}`);\n};\n\nfunction* loadPostDetail(action) {\n  //console.log(\"뭐를해야하는것인가요\")\n  try {\n    //console.log(\"loadPostDetail 잘 작동하는중\")\n    // console.log(action);\n    const result = yield call(loadPostDetailAPI, action.payload);\n    console.log(result, \"확인용 콘솔로그입니당!!!\");\n    //console.log(result, \"post_detail_saga_data 여기서부터 왜 안나오는거같지\");\n    //console.log(result.data, \"post_detail_saga_data 여기서부터 왜 안나오는거같지\");\n    //console.log(result.data._id, \"여기서부터 왜 안나오는거같지\");\n    //console.log(action.payload, \"금방 다 온것 같다!!!\");\n    //console.log(result.data, \"금방 다 온것 같다@@@@@@\");\n    //console.log(action.payload, \"금방 다 온것 같다!!!\");\n    yield put({\n      type: POST_DETAIL_LOADING_SUCCESS,\n      payload: result.data,\n    });\n    //console.log(\"어디가 에러인 것인고??\")\n  } catch (e) {\n    //console.log(e, \"에러확인용\")\n\n    yield put({\n      type: POST_DETAIL_LOADING_FAILURE,\n      payload: e,\n    });\n    yield put(push(\"/\"));\n  }\n}\n\nfunction* watchloadPostDetail() {\n  yield takeEvery(POST_DETAIL_LOADING_REQUEST, loadPostDetail);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Post Delete\n\n\nconst DeletePostAPI = (payload) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const token = payload.token;\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return axios.delete(`/api/post/${payload.id}`, config);\n};\n\n\n\nfunction* DeletePost(action) {\n  try {\n    const result = yield call(DeletePostAPI, action.payload);\n    yield put({\n      type: POST_DELETE_SUCCESS,\n      payload: result.data,\n    });\n    yield put(push(\"/\"));\n  } catch (e) {\n    yield put({\n      type: POST_DELETE_FAILURE,\n      payload: e,\n    });\n  }\n}\n\n\n\nfunction* watchDeletePost() {\n  yield takeEvery(POST_DELETE_REQUEST, DeletePost);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Post Edit Load\n\n\nconst PostEditLoadAPI = (payload) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const token = payload.token;\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return axios.get(`/api/post/${payload.id}/edit`, config);\n};\n\nfunction* PostEditLoad(action) {\n  try {\n    const result = yield call(PostEditLoadAPI, action.payload);\n    yield put({\n      type: POST_EDIT_LOADING_SUCCESS,\n      payload: result.data,\n    });\n  } catch (e) {\n    yield put({\n      type: POST_EDIT_LOADING_FAILURE,\n      payload: e,\n    });\n    yield put(push(\"/\"));\n  }\n}\n\nfunction* watchPostEditLoad() {\n  yield takeEvery(POST_EDIT_LOADING_REQUEST, PostEditLoad);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Post Edit UpLoad\n\n\nconst PostEditUploadAPI = (payload) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  console.log(payload, \"포스트 에딜 업로드 에이피아이 확인용\")\n  const token = payload.token;\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return axios.post(`/api/post/${payload.id}/edit`, payload, config);\n};\n\nfunction* PostEditUpload(action) {\n  try {\n    const result = yield call(PostEditUploadAPI, action.payload);\n    yield put({\n      type: POST_EDIT_UPLOADING_SUCCESS,\n      payload: result.data,\n    });\n    yield put(push(`/post/${result.data._id}`));\n  } catch (e) {\n    yield put({\n      type: POST_EDIT_UPLOADING_FAILURE,\n      payload: e,\n    });\n    yield put(push(\"/\"));\n  }\n}\n\nfunction* watchPostEditUpload() {\n  yield takeEvery(POST_EDIT_UPLOADING_REQUEST, PostEditUpload);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n// Category Find\nconst CategoryFindAPI = (payload) => {\n  return axios.get(`/api/post/category/${encodeURIComponent(payload)}`);//encodeURIComponent 인코딩 과정\n};\n\nfunction* CategoryFind(action) {\n  try {\n    const result = yield call(CategoryFindAPI, action.payload);\n    console.log(result, \"카테고리 파인드 에이피아이\")\n    yield put({\n      type: CATEGORY_FIND_SUCCESS,\n      payload: result.data,\n    });\n  } catch (e) {\n    yield put({\n      type: CATEGORY_FIND_FAILURE,\n      payload: e,\n    });\n  }\n}\n\nfunction* watchCategoryFind() {\n  yield takeEvery(CATEGORY_FIND_REQUEST, CategoryFind);\n}\n\n\n\n\n\n\n// Search Find\nconst SearchResultAPI = (payload) => {\n  return axios.get(`/api/search/${encodeURIComponent(payload)}`);\n};\n\nfunction* SearchResult(action) {\n  try {\n    const result = yield call(SearchResultAPI, action.payload);\n    yield put({\n      type: SEARCH_SUCCESS,\n      payload: result.data,\n    });\n    yield put(push(`/search/${encodeURIComponent(action.payload)}`));\n  } catch (e) {\n    yield put({\n      type: SEARCH_FAILURE,\n      payload: e,\n    });\n    yield put(push(\"/\"));\n  }\n}\n\nfunction* watchSearchResult() {\n  yield takeEvery(SEARCH_REQUEST, SearchResult);\n}\n\n\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPosts),\n    fork(watchuploadPosts),\n    fork(watchloadPostDetail),\n    fork(watchDeletePost),\n    fork(watchPostEditLoad),\n    fork(watchPostEditUpload),\n    fork(watchCategoryFind),\n    fork(watchSearchResult),\n    fork(watchuploadVisitorPosts),\n  ]);\n}","import axios from \"axios\";\r\nimport { call, put, takeEvery, all, fork } from \"redux-saga/effects\";\r\nimport {\r\n    COMMENT_LOADING_FAILURE,\r\n    COMMENT_LOADING_SUCCESS,\r\n    COMMENT_LOADING_REQUEST,\r\n    COMMENT_UPLOADING_SUCCESS,\r\n    COMMENT_UPLOADING_REQUEST,\r\n    COMMENT_UPLOADING_FAILURE,\r\n} from \"../types\";\r\nimport { push } from \"connected-react-router\";\r\n\r\n// Load Comment\r\n\r\nconst loadCommentsAPI = (payload) => {\r\n    console.log(payload, \"loadCommentAPI ID\");\r\n    return axios.get(`/api/post/${payload}/comments`);\r\n};\r\n\r\nfunction* loadComments(action) {\r\n    try {\r\n        console.log(action);\r\n        const result = yield call(loadCommentsAPI, action.payload);\r\n        console.log(result);\r\n        yield put({\r\n            type: COMMENT_LOADING_SUCCESS,\r\n            payload: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.log(e);\r\n        yield put({\r\n            type: COMMENT_UPLOADING_FAILURE,\r\n            payload: e,\r\n        });\r\n        yield push(\"/\");\r\n    }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n    yield takeEvery(COMMENT_LOADING_REQUEST, loadComments);\r\n}\r\n\r\n// UpLoad Comment\r\n\r\nconst uploadCommentsAPI = (payload) => {\r\n    console.log(payload.id, \"loadCommentAPI ID\");\r\n    return axios.post(`/api/post/${payload.id}/comments`, payload);\r\n};\r\n\r\nfunction* uploadComments(action) {\r\n    try {\r\n        const result = yield call(uploadCommentsAPI, action.payload);\r\n        console.log(result, \"UploadComment\");\r\n        yield put({\r\n            type: COMMENT_UPLOADING_SUCCESS,\r\n            payload: result.data,\r\n        });\r\n    } catch (e) {\r\n        console.log(e);\r\n        yield put({\r\n            type: COMMENT_LOADING_FAILURE,\r\n            payload: e,\r\n        });\r\n        yield push(\"/\");\r\n    }\r\n}\r\n\r\nfunction* watchUpLoadComments() {\r\n    yield takeEvery(COMMENT_UPLOADING_REQUEST, uploadComments);\r\n}\r\n\r\nexport default function* commentSaga() {\r\n    yield all([fork(watchLoadComments), fork(watchUpLoadComments)]);\r\n}","import { all, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport authSaga from \"./authSaga\";\nimport postSaga from \"./postSaga\"\nimport commentSaga from \"./commentSaga\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\naxios.defaults.baseURL = process.env.REACT_APP_BASIC_SERVER_URL;\n\n//console.log(`saga check in index ${process.env.REACT_APP_BASIC_SERVER_URL}`)\n\nexport default function* rootSaga() {\n  yield all([fork(authSaga), fork(postSaga), fork(commentSaga)]);//fork를 통해 비동기적 authSaga 설정 , all을 통해 사가들을 하나로 묶어줄 수 있다.\n}\n//sagas는 오브젝트들을 redux-saga미들웨어에 yield하는 제너레이터 함수로 구현되었다.","import { createStore, compose, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createBrowserHistory } from \"history\";\nimport { routerMiddleware } from \"connected-react-router\";\n\nimport createRootReducer from \"./redux/reducers/index\";\nimport rootSaga from \"./redux/sagas\";\n\nexport const history = createBrowserHistory();//열람 정보 객체\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst initialState = {};\n\nconst middlewares = [sagaMiddleware, routerMiddleware(history)];\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSIONS_COMPOSE__;\n\nconst composeEnhancer =\n  process.env.NODE_ENV === \"production\" ? compose : devtools || compose;//배포단계일 때는 devtools를 아닐 때는\n//createStore(reducer, [preloadedState], [enhancer])로 구성되어 있는데 enhancer은 redux의 기능을 도와주는 미들웨어 또는 데브 툴즈를 말한다.\nconst store = createStore(\n  createRootReducer(history),//root 리듀서 생성\n  initialState,//초기화\n  composeEnhancer(applyMiddleware(...middlewares))//...middleware를 열거함 즉 sagaMiddleware와 routerMiddleware를 사용할 수 있다.\n);// 리듀서 생성\n\nsagaMiddleware.run(rootSaga);//다음을 통해 saga가 실행 가능하다.\n\nexport default store;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  NavLink,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Alert,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n} from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CLEAR_ERROR_REQUEST, LOGIN_REQUEST } from \"../../redux/types\";\n\nconst LoginModal = () => {\n  const [modal, setModal] = useState(false);\n  const [localMsg, setLocalMsg] = useState(\"\");\n  const [form, setValues] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  //const sample = 'sample'\n  const dispatch = useDispatch();\n  const { errorMsg } = useSelector((state) => state.auth);//에러 메세지를 가져온다.\n  useEffect(() => {\n    try {\n      setLocalMsg(errorMsg);\n    } catch (e) {\n      console.log(`로그인 메세지 에러 ${e}`);\n    }\n  }, [errorMsg]);\n\n  const handleToggle = () => {\n    dispatch({\n      type: CLEAR_ERROR_REQUEST,\n    });\n    setModal(!modal);\n    console.log('toggle')\n  };\n\n  const onChange = (e) => {\n    //console.log('change1')\n    setValues({\n      ...form,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onSubmit = (e) => {\n    console.log('submit')\n    e.preventDefault();\n    const { email, password } = form;\n    const user = { email, password };\n    //console.log(user);\n    dispatch({\n//      console.log('dispatch');\n      type: LOGIN_REQUEST,\n      payload: user,\n    });\n    console.log('dispatch');\n  };\n  return (\n    <div className=\"loginModal\" >\n      <NavLink onClick={handleToggle} href=\"#\">\n        Login\n      </NavLink>\n      <Modal isOpen={modal} toggle={handleToggle}>\n        <ModalHeader toggle={handleToggle}>Login</ModalHeader>\n        <ModalBody>\n          {localMsg ? <Alert color=\"danger\">{localMsg}</Alert> : null}\n          <Form onSubmit={onSubmit}>\n            <FormGroup>\n              <Label for=\"email\">Email</Label>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                placeholder=\"Email\"\n                onChange={onChange}\n              />\n              <Label for=\"password\">Password</Label>\n              <Input\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                placeholder=\"Password\"\n                onChange={onChange}\n              />\n              <Button color=\"dark\" style={{ marginTop: \"2rem\" }} block>\n                Login\n              </Button>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};\n\nexport default LoginModal;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { CLEAR_ERROR_REQUEST, REGISTER_REQUEST } from \"../../redux/types\";\nimport {\n  NavLink,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Alert,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n} from \"reactstrap\";\n\nconst RegisterModal = () => {\n  const [modal, setModal] = useState(false);\n  const [form, setValue] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  const [localMsg, setLocalMsg] = useState(\"\");\n  const { errorMsg } = useSelector((state) => state.auth);\n\n  const dispatch = useDispatch();\n  const handleToggle = () => {\n    dispatch({\n      type: CLEAR_ERROR_REQUEST,\n    });\n    setModal(!modal);\n  };\n\n  useEffect(() => {\n    try {\n      setLocalMsg(errorMsg);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [errorMsg]);\n\n  const onChange = (e) => {\n    setValue({\n      ...form,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { name, email, password } = form;\n    const newUser = { name, email, password };\n    console.log(newUser, \"newUser\");\n    dispatch({\n      type: REGISTER_REQUEST,\n      payload: newUser,\n    });\n  };\n  return (\n    <div>\n      <NavLink onClick={handleToggle} href=\"#\">\n        Register\n      </NavLink>\n      <Modal isOpen={modal} toggle={handleToggle}>\n        <ModalHeader toggle={handleToggle}>Register</ModalHeader>\n        <ModalBody>\n          {localMsg ? <Alert color=\"danger\">{localMsg}</Alert> : null}\n          <Form onSubmit={onSubmit}>\n            <FormGroup>\n              <Label for=\"name\">Name</Label>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                placeholder=\"Name\"\n                onChange={onChange}\n              />\n              <Label for=\"email\">Email</Label>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                placeholder=\"Email\"\n                onChange={onChange}\n              />\n              <Label for=\"password\">Password</Label>\n              <Input\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                placeholder=\"Password\"\n                onChange={onChange}\n              />\n              <Button color=\"dark\" className=\"mt-2\" block>\n                Register\n              </Button>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};\n\nexport default RegisterModal;","import React, { Fragment, useState, useCallback, useEffect } from \"react\";\r\nimport {\r\n    Navbar,\r\n    Container,\r\n    NavbarToggler,\r\n    Collapse,\r\n    Nav,\r\n    NavItem,\r\n    Form,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { LOGOUT_REQUEST, POSTS_WRITE_REQUEST } from \"../redux/types\";\r\nimport LoginModal from \"../components/auth/LoginModal\";\r\nimport RegisterModal from \"../components/auth/RegisterModal\";\r\nimport SearchInput from \"./search/searchInput\";\r\n\r\nconst MenuList = () => {\r\n    const [isOpen, setIsOpen] = useState(false);//초기값 부여 및 setIsOpen의 값이 변하면 isOpen의 값이 변한다\r\n    const [isOpenBoard, setIsOpenBoard] = useState(false);\r\n    const [isOpenCompetiton, setIsOpenCompetition] = useState(false);\r\n    const [isOpenCompetiton_1, setIsOpenCompetiton_1] = useState(false);\r\n    const [isOpenCompetiton_2, setIsOpenCompetiton_2] = useState(false);\r\n    const [trigger, setTrigger] = useState(1);\r\n    const { isAuthenticated, user, userRole } = useSelector(//store에서 state를 가져온다. 즉, authenticated, user, userRole를 받아온다.\r\n        (state) => state.auth//state.auth 받아 옴 \r\n    );\r\n    //console.log(userRole, \"UserRole\");\r\n\r\n    const dispatch = useDispatch();//액션을 파라미터로 전달한다.\r\n\r\n    const onLogout = useCallback(() => {\r\n        dispatch({\r\n            type: LOGOUT_REQUEST,\r\n        });\r\n    }, [dispatch]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setIsOpen(false);\r\n        setIsOpenBoard(false);\r\n    }, [user]);//유저가 변할 때 isopen이 꺼진다.\r\n\r\n\r\n    const handleToggleBoard = () => {\r\n        setIsOpenBoard(!isOpenBoard);\r\n    };//isOpen의 값을 토글한다.\r\n\r\n\r\n\r\n    const handleToggleCompetiton = () => {\r\n        if (isOpenCompetiton == false)\r\n            setIsOpenCompetition(!isOpenCompetiton);\r\n    };//isOpen의 값을 토글한다.\r\n\r\n    const handleToggleCompetitonClose = () => {\r\n        if (isOpenCompetiton == true)\r\n            setIsOpenCompetition(!isOpenCompetiton);\r\n    };//isOpen의 값을 토글한다.\r\n\r\n\r\n\r\n    const handleToggleCompetiton_1 = () => {\r\n        console.log(isOpenCompetiton_1)\r\n        setIsOpenCompetiton_1(!isOpenCompetiton_1);\r\n    };//isOpen의 값을 토글한다.\r\n\r\n\r\n    const handleToggleCompetiton_2 = () => {\r\n        setIsOpenCompetiton_2(!isOpenCompetiton_2);\r\n    };//isOpen의 값을 토글한다.\r\n\r\n\r\n    const Plus_tap = (\r\n        <Fragment>\r\n            <div className=\"plus_minus\">\r\n                +\r\n            </div>\r\n        </Fragment>\r\n    );\r\n\r\n    const Minus_tap = (\r\n        <Fragment>\r\n            <div className=\"plus_minus\" >-</div>\r\n        </Fragment>\r\n    );\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <nav className=\"top_menu_nav\">\r\n                <ul className=\"menu_list\">\r\n                    <li> <Link to=\"/post/60348b1452a7ca64442a5af6\" className=\"top_menu_link\"> 소개 </Link> </ li>\r\n\r\n                    <li onClick={handleToggleBoard}> <div className=\"top_menu_link\"> 게시판\r\n                    {isOpenBoard ? Minus_tap : Plus_tap}</div>\r\n                        <Collapse isOpen={isOpenBoard} >\r\n                            <ul>\r\n                                <li>  <Link to=\"/post/list/공지사항\" className=\"top_menu_link\"> 공지사항 </Link> </ li>\r\n                                <li>  <Link to=\"/post/list/자유게시판\" className=\"top_menu_link\"> 자유게시판 </Link> </ li>\r\n                                <li>  <Link to=\"/post/list/손님게시판\" className=\"top_menu_link\"> 손님게시판 </Link> </ li>\r\n                                {isAuthenticated ?\r\n                                    <li>  <Link to=\"/post/list/정회원게시판\" className=\"top_menu_link\"> 정회원게시판 </Link> </ li> : <div></div>}\r\n                            </ ul>\r\n                        </Collapse>\r\n                    </ li>\r\n                    <li onClick={handleToggleCompetiton}>\r\n                        <div className=\"top_menu_link\" onClick={handleToggleCompetitonClose}>대회 및 전시회{isOpenCompetiton ? Minus_tap : Plus_tap}</div>\r\n\r\n                        <Collapse isOpen={isOpenCompetiton}>\r\n                            <ul>\r\n                                <li onClick={handleToggleCompetitonClose}>  <Link to=\"/post/list/MAZE전시회\" className=\"top_menu_link\"> MAZE 전시회 </Link> </ li>\r\n                                <li onClick={handleToggleCompetiton_1}>\r\n                                    <div to=\"\" className=\"top_menu_link\"> 단국대 대회 수상자 {isOpenCompetiton_1 ? Minus_tap : Plus_tap}</div>\r\n                                    <ul >\r\n                                        <Collapse isOpen={isOpenCompetiton_1}>\r\n                                            <li onClick={handleToggleCompetitonClose}>  <Link to=\"/post/list/스텝 트레이서\" className=\"top_menu_link\"> 스텝 트레이서 </Link> </ li>\r\n                                            <li onClick={handleToggleCompetitonClose}>  <Link to=\"/post/list/DC 트레이서\" className=\"top_menu_link\"> DC 트레이서 </Link> </ li >\r\n                                            <li onClick={handleToggleCompetitonClose}>  <Link to=\"/post/list/마이크로 마우스\" className=\"top_menu_link\"> 마이크로 마우스 </Link> </ li >\r\n                                        </Collapse>\r\n                                    </ ul >\r\n                                </ li >\r\n                                <li onClick={handleToggleCompetiton_2}>\r\n                                    <div to=\"\" className=\"top_menu_link\"> sub nav {isOpenCompetiton_2 ? Minus_tap : Plus_tap} </div>\r\n                                    <ul >\r\n                                        <Collapse isOpen={isOpenCompetiton_2}>\r\n                                            <li onClick={handleToggleCompetitonClose}>  <Link to=\"\" className=\"top_menu_link\"> child </Link> </ li>\r\n                                            <li onClick={handleToggleCompetitonClose}>  <Link to=\"\" className=\"top_menu_link\"> child </Link> </ li >\r\n                                            <li onClick={handleToggleCompetitonClose}>  <Link to=\"\" className=\"top_menu_link\"> child </Link> </ li >\r\n                                        </Collapse>\r\n                                    </ ul >\r\n                                </ li >\r\n                            </ ul >\r\n                        </Collapse>\r\n                    </ li >\r\n                    <li>  <Link to=\"/test\" className=\"top_menu_link\"> 사진첩 </Link> </ li >\r\n                    <li>  <Link to=\"\" className=\"top_menu_link\"> 링크 </Link> </ li >\r\n                </ ul >\r\n\r\n            </nav>\r\n\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nexport default MenuList;","import React, { Fragment, useState, useCallback, useEffect } from \"react\";\r\nimport {\r\n    Navbar,\r\n    Container,\r\n    NavbarToggler,\r\n    Collapse,\r\n    Nav,\r\n    NavItem,\r\n    Form,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { LOGOUT_REQUEST, POSTS_WRITE_REQUEST } from \"../redux/types\";\r\n\r\nconst MenuListWindow = () => {\r\n    const [isOpen, setIsOpen] = useState(false);//초기값 부여 및 setIsOpen의 값이 변하면 isOpen의 값이 변한다\r\n    const [isOpenBoard, setIsOpenBoard] = useState(false);\r\n    const [isOpenCompetiton, setIsOpenCompetition] = useState(false);\r\n    const [isOpenCompetiton_1, setIsOpenCompetiton_1] = useState(false);\r\n    const [isOpenCompetiton_2, setIsOpenCompetiton_2] = useState(false);\r\n    const [trigger, setTrigger] = useState(1);\r\n    const { isAuthenticated, user, userRole } = useSelector(//store에서 state를 가져온다. 즉, authenticated, user, userRole를 받아온다.\r\n        (state) => state.auth//state.auth 받아 옴 \r\n    );\r\n    //console.log(userRole, \"UserRole\");\r\n\r\n    const dispatch = useDispatch();//액션을 파라미터로 전달한다.\r\n\r\n    const onLogout = useCallback(() => {\r\n        dispatch({\r\n            type: LOGOUT_REQUEST,\r\n        });\r\n    }, [dispatch]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setIsOpen(false);\r\n        setIsOpenBoard(false);\r\n    }, [user]);//유저가 변할 때 isopen이 꺼진다.\r\n\r\n\r\n    const handleToggleBoard = () => {\r\n        setIsOpenBoard(!isOpenBoard);\r\n    };//isOpen의 값을 토글한다.\r\n\r\n\r\n\r\n    const handleToggleCompetiton = () => {\r\n        if (isOpenCompetiton == false)\r\n            setIsOpenCompetition(!isOpenCompetiton);\r\n    };//isOpen의 값을 토글한다.\r\n\r\n    const handleToggleCompetitonClose = () => {\r\n        if (isOpenCompetiton == true)\r\n            setIsOpenCompetition(!isOpenCompetiton);\r\n    };//isOpen의 값을 토글한다.\r\n\r\n\r\n\r\n    const handleToggleCompetiton_1 = () => {\r\n        console.log(isOpenCompetiton_1)\r\n        setIsOpenCompetiton_1(!isOpenCompetiton_1);\r\n    };//isOpen의 값을 토글한다.\r\n\r\n\r\n    const handleToggleCompetiton_2 = () => {\r\n        setIsOpenCompetiton_2(!isOpenCompetiton_2);\r\n    };//isOpen의 값을 토글한다.\r\n\r\n\r\n    const Plus_tap = (\r\n        <Fragment>\r\n            <div className=\"plus_minus\">\r\n                +\r\n            </div>\r\n        </Fragment>\r\n    );\r\n\r\n    const Minus_tap = (\r\n        <Fragment>\r\n            <div className=\"plus_minus\" ><span>-</span></div>\r\n        </Fragment>\r\n    );\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <nav className=\"top_menu_nav_Window\">\r\n                <ul>\r\n                    <li> <Link to=\"/post/60348b1452a7ca64442a5af6\" className=\"top_menu_link\"> 소개 </Link> </ li>\r\n                    <li> <Link to=\"\" className=\"top_menu_link\"> 게시판 </Link>\r\n                        <ul>\r\n                            <li>  <Link to=\"/post/list/공지사항\" className=\"top_menu_link\"> 공지사항 </Link> </ li>\r\n                            <li>  <Link to=\"/post/list/자유게시판\" className=\"top_menu_link\"> 자유게시판 </Link> </ li>\r\n                            <li>  <Link to=\"/post/list/손님게시판\" className=\"top_menu_link\"> 손님게시판 </Link> </ li>\r\n                            {isAuthenticated ?\r\n                                <li>  <Link to=\"/post/list/정회원게시판\" className=\"top_menu_link\"> 정회원게시판 </Link> </ li> : <div></div>}\r\n                        </ ul>\r\n                    </ li>\r\n                    <li>\r\n                        <Link to=\"\" className=\"top_menu_link\"> 대회 및 전시회 </Link>\r\n                        <ul>\r\n                            <li>  <Link to=\"/post/list/MAZE전시회\" className=\"top_menu_link\"> MAZE 전시회 </Link> </ li>\r\n                            <li>\r\n                                <Link to=\"\" className=\"top_menu_link\"> 단국대 대회 </Link>\r\n                                <ul>\r\n                                    <li>  <Link to=\"/post/list/스텝 트레이서\" className=\"top_menu_link\"> 스텝 트레이서 </Link> </ li>\r\n                                    <li>  <Link to=\"/post/list/DC 트레이서\" className=\"top_menu_link\"> DC 트레이서 </Link> </ li >\r\n                                    <li>  <Link to=\"/post/list/마이크로 마우스\" className=\"top_menu_link\"> 마이크로 마우스 </Link> </ li >\r\n                                </ ul >\r\n                            </ li >\r\n                            <li>\r\n                                <Link to=\"/\" className=\"top_menu_link\"> sub nav </Link>\r\n                                <ul>\r\n                                    <li>  <Link to=\"\" className=\"top_menu_link\"> child </Link> </ li>\r\n                                    <li>  <Link to=\"\" className=\"top_menu_link\"> child </Link> </ li >\r\n                                    <li>  <Link to=\"\" className=\"top_menu_link\"> child </Link> </ li >\r\n                                </ ul >\r\n                            </ li >\r\n                        </ ul >\r\n                    </ li >\r\n                    <li>  <Link to=\"/test\" className=\"top_menu_link\"> 사진첩 </Link> </ li >\r\n                    <li>  <Link to=\"\" className=\"top_menu_link\"> 링크 </Link> </ li >\r\n                </ ul >\r\n            </nav>\r\n\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nexport default MenuListWindow;","  \nimport React, { Fragment, useState, useCallback, useEffect } from \"react\";\nimport {\n  Navbar,\n  Container,\n  NavbarToggler,\n  Collapse,\n  Nav,\n  NavItem,\n  Form,\n  Button,\n} from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { LOGOUT_REQUEST, POSTS_WRITE_REQUEST } from \"../redux/types\";\nimport LoginModal from \"../components/auth/LoginModal\";\nimport RegisterModal from \"../components/auth/RegisterModal\";\nimport MenuList from \"./MenuList\";\nimport MenuListWindow from \"./MenuListWindow\";\nimport SearchInput from \"./search/searchInput\";\nimport jQuery from \"jquery\"\n\n\nconst AppNavbar = () => {\n  const [isOpen, setIsOpen] = useState(false);//초기값 부여 및 setIsOpen의 값이 변하면 isOpen의 값이 변한다\n  const { isAuthenticated, user, userRole } = useSelector(//store에서 state를 가져온다. 즉, authenticated, user, userRole를 받아온다.\n    (state) => state.auth//state.auth 받아 옴 \n  );\n  const [isWindowWidth, setWindowWidth] = useState(2);\n  //console.log(userRole, \"UserRole\");\n\n  window.$ = window.jQuery = jQuery;\n\n  const dispatch = useDispatch();//액션을 파라미터로 전달한다.\n\n  const onLogout = useCallback(() => {\n    dispatch({\n      type: LOGOUT_REQUEST,\n    });\n  }, [dispatch]);\n\n  const handleResize = () => {\n    console.log(window.innerWidth)\n    if (window.innerWidth > 992) { setWindowWidth(1) }\n    else { setWindowWidth(0) }\n  }\n\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    // console.log(isWindowWidth, \"왜이러는거야 흑흑\");\n    setIsOpen(false);\n  }, [isWindowWidth]);//유저가 변할 때 isopen이 꺼진다.\n\n\n\n  const handleToggle = () => {\n    setIsOpen(!isOpen);\n  };//isOpen의 값을 토글한다.\n\n  const addPostClick = () => {\n    console.log(\"POSTS_WRITE_REQUEST\")\n    dispatch({\n      type: POSTS_WRITE_REQUEST,\n    });\n  };\n\n\n  const authLink = (\n    <Fragment>\n      <NavItem className=\"justify-content-center\">\n        <Form className=\"col mt-2\">\n          {user && user.name ? (\n            <Link to={`/user/${user.name}/profile`}>\n              <Button outline color=\"light\" className=\"px-3\" block>\n                <strong>{user ? `${user.name}` : \"\"}</strong>\n              </Button>\n            </Link>\n          ) : (\n            <Button outline color=\"light\" className=\"px-3\" block>\n              <strong>No User</strong>\n            </Button>\n          )}\n        </Form>\n      </NavItem>\n      <NavItem>\n        <Form className=\"col\">\n          <Link onClick={onLogout} to=\"#\" className=\"\">\n            <Button outline color=\"light\" className=\"mt-2\" block>\n              Logout\n            </Button>\n          </Link>\n        </Form>\n      </NavItem>\n    </Fragment>\n  );\n\n  const guestLink = (\n    <Fragment>\n      <NavItem>\n        <RegisterModal />\n      </NavItem>\n      <NavItem>\n        <LoginModal />\n      </NavItem>\n    </Fragment>\n  );\n\n\n\n  if( window.$(window).scrollTop() == 0) {\n    window.$(\".AppNavbar_none\").css(\"top\", \"0px\");\n    console.log(\"테스트중입니다.\");\n  }\n\n  console.log(window.innerWidth);\n\n  var lastScrollTop = 0, delta = 15;\n\n  // window.$(\".nav_main_link\").click(function() {window.location.reload()})\n\n  window.$(window).scroll(function () {\n    var scrollTop = window.$(this).scrollTop() /* 스크롤바 수직 위치를 가져옵니다, 괄호 안에 값(value)이 있을 경우 스크롤바의 수직 위치를 정합니다. */\n    // Math.abs: 주어진 숫자의 절대값을 반환(return)합니다.\n    if (Math.abs(lastScrollTop - scrollTop) <= delta) // 스크롤 값을 받아서 ~\n      return; // ~ 리턴\n\n    if ((scrollTop > lastScrollTop) && (lastScrollTop > 0)) {\n      /* 화면에 나오지 않을 때, top값은 요소가 보이지 않을 정도로 사용해야함 */\n      window.$(\".AppNavbar_none\").css(\"top\", \"-100px\");\n    } else {\n      window.$(\".AppNavbar_none\").css(\"top\", \"0px\");\n    }\n    console.log(\"테스트중입니다.\");\n    lastScrollTop = scrollTop;\n  });\n\n\n\n  return (\n    <Fragment>\n\n      <div className=\"AppNavbar_none\">\n        {userRole === \"MainJuin\" ? (\n          <Form className=\"col mt-2\">\n            <Link\n              to=\"/post\"\n              className=\"btn btn-success block text-white px-3\"\n              onClick={addPostClick}\n            >\n              Add Post\n            </Link>\n          </Form>\n        ) : (\n          \"\"\n        )}\n\n        <div className=\"AppNavBar\">\n          <Navbar color=\"dark\" dark expand=\"lg\" className=\"sticky-top\">\n            <div className=\"nav_body\">\n              <Link to=\"/\" className=\"text-white text-decoration-none nav_main_link\">\n                <h3>M</h3>\n              </Link>\n              <NavbarToggler onClick={handleToggle} />\n              <Collapse className=\"Collapse_bar\" isOpen={isOpen} navbar>\n                {/* <SearchInput isOpen={isOpen} /> */}\n                {isWindowWidth ? < MenuListWindow /> : < MenuList />}\n\n\n                <Nav className=\"top_menu_nav testing\" navbar>\n                  {isAuthenticated ? authLink : guestLink}\n                </Nav>\n              </Collapse >\n            </div >\n          </Navbar >\n        </div>\n      </div>\n    </Fragment >\n  );\n};\n\nexport default AppNavbar;","import React, { Fragment } from \"react\";\nimport { Row, Spinner } from \"reactstrap\";\n\nexport const GrowingSpinner = (\n  <Fragment>\n    <Row className=\"d-flex justify-content-center m-5\">\n      <Spinner\n        style={{ width: \"2rem\", height: \"2rem\" }}\n        type=\"grow\"\n        color=\"primary\"\n      />\n      <Spinner\n        style={{ width: \"2rem\", height: \"2rem\" }}\n        type=\"grow\"\n        color=\"secondary\"\n      />\n      <Spinner\n        style={{ width: \"2rem\", height: \"2rem\" }}\n        type=\"grow\"\n        color=\"success\"\n      />\n      <Spinner\n        style={{ width: \"2rem\", height: \"2rem\" }}\n        type=\"grow\"\n        color=\"danger\"\n      />\n      <Spinner\n        style={{ width: \"2rem\", height: \"2rem\" }}\n        type=\"grow\"\n        color=\"warning\"\n      />\n      <Spinner\n        style={{ width: \"2rem\", height: \"2rem\" }}\n        type=\"grow\"\n        color=\"info\"\n      />\n      <Spinner\n        style={{ width: \"2rem\", height: \"2rem\" }}\n        type=\"grow\"\n        color=\"light\"\n      />\n      <Spinner\n        style={{ width: \"2rem\", height: \"2rem\" }}\n        type=\"grow\"\n        color=\"dark\"\n      />\n    </Row>\n  </Fragment>\n);","import React, { Fragment } from \"react\";\nimport {\n  Card,\n  CardImg,\n  CardBody,\n  CardTitle,\n  Button,\n  Badge,\n  Row,\n} from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMouse } from \"@fortawesome/free-solid-svg-icons\";\n\nconst PostCardOne = ({ posts }) => {\n  return (\n    <Fragment>\n      {Array.isArray(posts)\n        // Array.isArray(posts)가 배열인지 아닌지 확인함\n        ? posts.map(({ _id, title, fileUrl, comments, views }) => {\n          return (\n            <div key={_id} className=\"col-md-4\">\n              <Link\n                to={`/post/${_id}`}\n                className=\"text-dark text-decoration-none\"\n              >\n                <Card className=\"mb-3\">\n                  <CardImg top alt=\"img\" src={fileUrl} />\n                  <CardBody>\n                    <CardTitle className=\"text-truncate d-flex justify-content-between\">\n                      <span className=\"text-truncate\">{title} </span>\n                      <span>\n                        <FontAwesomeIcon icon={faMouse} />\n                          &nbsp;&nbsp;\n                          <span>{views}</span>\n                      </span>\n                    </CardTitle>\n                    <Row>\n                      <Button color=\"primary\" className=\"p-2 btn-block\">\n                        More <Badge color=\"light\">{comments.length}</Badge>\n                      </Button>\n                    </Row>\n                  </CardBody>\n                </Card>\n              </Link>\n            </div>\n          );\n        })\n        : \"\"}\n    </Fragment>\n  );\n};\n\nexport default PostCardOne;","import React from 'react';\r\nimport { Table, Col } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Listdetail = ({ posts }) => {\r\n\r\n\r\n    // console.log(\"posts.creator.name\", posts)\r\n    if (posts[0] == 0) return <div></div>\r\n    // console.log(posts, \"리스트 내부 확인용\")\r\n    return (\r\n        <div>\r\n            {/* <ul>\r\n                <li></li>\r\n                {posts.map(post => (\r\n                    <li key={post._id}>\r\n                        {post.title}\r\n                    </li>\r\n                ))}\r\n            </ul> */}\r\n\r\n            <div className=\"List_table\">\r\n                <div className=\"List_Top_Info\">\r\n                    <div className=\"List_div\">\r\n                        <div className=\"table_name_top\">제목</div>\r\n                        <div className=\"table_creator_top\">글쓴이</div>\r\n                        <div className=\"table_date_top\">날짜</div>\r\n                        <div className=\"table_view_top\">조회수</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"List_Bottom_Info\">\r\n                    {posts.map(posts =>\r\n                        <div className=\"List_div\" key={posts._id}>\r\n                            <div className=\"table_name\">\r\n                                <Link to={`/post/${posts._id}`} className=\"text-dark text-decoration-none\">\r\n                                    <div className=\"ellipse_list_name_s\">{posts.title}</div>\r\n                                </Link>\r\n                            </div>\r\n                            <div className=\"table_creator\"> {posts.creatorName}</div>\r\n                            <div className=\"table_date\">{posts.date}</div>\r\n                            <div className=\"table_view\">{posts.views}</div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Listdetail;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate, currentPage }) => {\r\n    const pageNumbers = [];\r\n\r\n    const totalList = Math.ceil(totalPosts / postsPerPage)\r\n    //console.log(postsPerPage, \"postsPerPage\")\r\n    //console.log(totalPosts, \"totalPosts\")\r\n    //console.log(totalList, \"토탈리스트\")\r\n    //console.log(currentPage, \"커렌트 페이징 확인용\")\r\n    if (totalList < 10) {\r\n        for (let i = 1; i <= totalList; i++) {\r\n            pageNumbers.push(i);\r\n        }\r\n    }\r\n    else if (Math.floor((currentPage - 1) / 10) >= Math.floor(totalList / 10)) {\r\n        for (let i = Math.floor(currentPage / 10) * 10 + 1; i <= totalList; i++) {\r\n            pageNumbers.push(i);\r\n        }\r\n    }\r\n    else {\r\n        for (let i = Math.floor((currentPage - 1) / 10) + 1; i <= Math.floor((currentPage - 1) / 10) * 10 + 10; i++) {\r\n            pageNumbers.push(i);\r\n        }\r\n    }\r\n    console.log(pageNumbers, \"페이지 넘버\")\r\n\r\n\r\n    return (\r\n        <div className=\"maze_page\">\r\n\r\n            <ul className=\"maze_pagination maze_modal\">\r\n                <li>\r\n                    <span className=\"maze_first maze_last\" onClick={() => paginate(1)}>\r\n                        &lt;&lt;\r\n                    </span>\r\n                </li>\r\n                <li>\r\n                    <span className=\"maze_arrow-left maze_list_etc\" onClick={() => paginate(currentPage - 1)}>\r\n                        &lt;\r\n                    </span>\r\n                </li>\r\n                {pageNumbers.map(number => (\r\n                    <li key={number}>\r\n                        { number === currentPage ?\r\n                            <span className=\"maze_num_current\" onClick={() => paginate(number)}>\r\n                                {number}\r\n                            </span>\r\n                            :\r\n                            <span className=\"maze_num\" onClick={() => paginate(number)}>\r\n                                {number}\r\n                            </span>\r\n\r\n                        }\r\n                    </li>\r\n                ))}\r\n\r\n                <li>\r\n                    <span className=\"maze_arrow-right maze_list_etc\" onClick={() => paginate(currentPage + 1)}>\r\n                        &gt;\r\n                    </span>\r\n                </li>\r\n\r\n                <li >\r\n                    <span className=\"maze_last maze_last\" onClick={() => paginate(totalList)}>\r\n                        &gt;&gt;\r\n                    </span>\r\n                </li>\r\n            </ul>\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n\r\n\r\n","import React, { useEffect, Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { POSTS_LOADING_REQUEST } from \"../../redux/types\";\nimport { Helmet } from \"react-helmet\";\nimport { Row } from \"reactstrap\";\nimport { GrowingSpinner } from \"../../components/spinner/Spinner\";\nimport PostCardOne from \"../../components/post/PostCardOne\";\nimport Category from \"../../components/post/Category\";\n\nconst PostCardList = () => {\n  const { posts, categoryFindResult, loading, postCount } = useSelector(\n    (state) => state.post\n  );//값들을 다\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch({ type: POSTS_LOADING_REQUEST });\n  }, [dispatch]);\n\n  return (\n    <Fragment>\n      <Helmet title=\"Home\" />\n      <Row className=\"border-bottom border-top border-primary py-2 mb-3\">\n        {/* <Category posts={categoryFindResult} /> */}\n      </Row>\n\n      <Row>{posts ? <PostCardOne posts={posts} /> : GrowingSpinner}</Row>\n    </Fragment>\n  );\n};\n\nexport default PostCardList;","import Essentials from \"@ckeditor/ckeditor5-essentials/src/essentials\";\n\nimport Paragraph from \"@ckeditor/ckeditor5-paragraph/src/paragraph\";\n\nimport Bold from \"@ckeditor/ckeditor5-basic-styles/src/bold\";\n\nimport Italic from \"@ckeditor/ckeditor5-basic-styles/src/italic\";\n\nimport Underline from \"@ckeditor/ckeditor5-basic-styles/src/underline\";\n\nimport Strikethrough from \"@ckeditor/ckeditor5-basic-styles/src/strikethrough\";\n\nimport Code from \"@ckeditor/ckeditor5-basic-styles/src/code\";\n\nimport BlockQuote from \"@ckeditor/ckeditor5-block-quote/src/blockquote\";\n\nimport Link from \"@ckeditor/ckeditor5-link/src/link\";\n\nimport MediaEmbed from \"@ckeditor/ckeditor5-media-embed/src/mediaembed\";\n\nimport PasteFromOffice from \"@ckeditor/ckeditor5-paste-from-office/src/pastefromoffice\";\n\nimport Heading from \"@ckeditor/ckeditor5-heading/src/heading\";\n\nimport Font from \"@ckeditor/ckeditor5-font/src/font\";\n\nimport Image from \"@ckeditor/ckeditor5-image/src/image\";\n\nimport ImageStyle from \"@ckeditor/ckeditor5-image/src/imagestyle\";\n\nimport ImageToolbar from \"@ckeditor/ckeditor5-image/src/imagetoolbar\";\n\nimport ImageUpload from \"@ckeditor/ckeditor5-image/src/imageupload\";\n\nimport ImageResize from \"@ckeditor/ckeditor5-image/src/imageresize\";\n\nimport List from \"@ckeditor/ckeditor5-list/src/list\";\n\nimport Alignment from \"@ckeditor/ckeditor5-alignment/src/alignment\";\n\nimport Table from \"@ckeditor/ckeditor5-table/src/table\";\n\nimport TableToolbar from \"@ckeditor/ckeditor5-table/src/tabletoolbar\";\n\nimport TextTransformation from \"@ckeditor/ckeditor5-typing/src/texttransformation\";\n\nimport Indent from \"@ckeditor/ckeditor5-indent/src/indent\";\n\nimport IndentBlock from \"@ckeditor/ckeditor5-indent/src/indentblock\";\n\n/* import Base64UploadAdapter from \"@ckeditor/ckeditor5-upload/src/adapters/base64uploadadapter\"; */\n\nimport SimpleUploadAdapter from \"@ckeditor/ckeditor5-upload/src/adapters/simpleuploadadapter\";\n\nimport \"@ckeditor/ckeditor5-build-classic/build/translations/ko\";\n\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nexport const editorConfiguration = {\n  plugins: [\n    Essentials,\n\n    Paragraph,\n\n    Bold,\n\n    Code,\n\n    Italic,\n\n    Heading,\n\n    Indent,\n\n    IndentBlock,\n\n    Underline,\n\n    Strikethrough,\n\n    BlockQuote,\n\n    Font,\n\n    Alignment,\n\n    List,\n\n    Link,\n\n    MediaEmbed,\n\n    PasteFromOffice,\n\n    Image,\n\n    ImageStyle,\n\n    ImageToolbar,\n\n    ImageUpload,\n\n    ImageResize,\n\n    SimpleUploadAdapter,\n\n    Table,\n\n    TableToolbar,\n\n    TextTransformation,\n  ],\n\n  toolbar: [\n    \"heading\",\n\n    \"|\",\n\n    \"bold\",\n\n    \"italic\",\n\n    \"underline\",\n\n    \"strikethrough\",\n\n    \"code\",\n\n    \"|\",\n\n    \"fontSize\",\n\n    \"fontColor\",\n\n    \"fontBackgroundColor\",\n\n    \"|\",\n\n    \"alignment\",\n\n    \"outdent\",\n\n    \"indent\",\n\n    \"bulletedList\",\n\n    \"numberedList\",\n\n    \"blockQuote\",\n\n    \"|\",\n\n    \"link\",\n\n    \"insertTable\",\n\n    \"imageUpload\",\n\n    \"mediaEmbed\",\n\n    \"|\",\n\n    \"undo\",\n\n    \"redo\",\n  ],\n\n  heading: {\n    options: [\n      {\n        model: \"paragraph\",\n\n        view: \"p\",\n\n        title: \"본문\",\n\n        class: \"ck-heading_paragraph\",\n      },\n\n      {\n        model: \"heading1\",\n\n        view: \"h1\",\n\n        title: \"헤더1\",\n\n        class: \"ck-heading_heading1\",\n      },\n\n      {\n        model: \"heading2\",\n\n        view: \"h2\",\n\n        title: \"헤더2\",\n\n        class: \"ck-heading_heading2\",\n      },\n\n      {\n        model: \"heading3\",\n\n        view: \"h3\",\n\n        title: \"헤더3\",\n\n        class: \"ck-heading_heading3\",\n      },\n    ],\n  },\n\n  fontSize: {\n    options: [\n      9,\n\n      10,\n\n      11,\n\n      12,\n\n      13,\n\n      14,\n\n      15,\n\n      16,\n\n      17,\n\n      18,\n\n      19,\n\n      20,\n\n      21,\n\n      23,\n\n      25,\n\n      27,\n\n      29,\n\n      31,\n\n      33,\n\n      35,\n    ],\n  },\n\n  alignment: {\n    options: [\"justify\", \"left\", \"center\", \"right\"],\n  },\n\n  table: {\n    contentToolbar: [\"tableColumn\", \"tableRow\", \"mergeTableCells\"],\n  },\n\n  image: {\n    resizeUnit: \"px\",\n\n    toolbar: [\n      \"imageStyle:alignLeft\",\n\n      \"imageStyle:full\",\n\n      \"imageStyle:alignRight\",\n\n      \"|\",\n\n      \"imageTextAlternative\",\n    ],\n\n    styles: [\"full\", \"alignLeft\", \"alignRight\"],\n  },\n\n  typing: {\n    transformations: {\n      remove: [\n        \"enDash\",\n\n        \"emDash\",\n\n        \"oneHalf\",\n\n        \"oneThird\",\n\n        \"twoThirds\",\n\n        \"oneForth\",\n\n        \"threeQuarters\",\n      ],\n    },\n  },\n\n  language: \"ko\",\n\n  simpleUpload: {\n    uploadUrl: `${process.env.REACT_APP_BASIC_SERVER_URL}/api/post/image`,\n\n    // Headers sent along with the XMLHttpRequest to the upload server.\n\n    headers: {\n      \"X-CSRF-TOKEN\": \"CSFR-Token\",\n    },\n  },\n};\n\nexport const ReadOnly_Configuration = {\n  toolbar: [\"heading\"],\n\n  heading: {},\n};\n\n","//ckeditor 관련 복사해온 소스\n\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nclass MyUploadAdapter {\n  constructor(loader) {\n    // The file loader instance to use during the upload.\n    this.loader = loader;\n  }\n\n  // Starts the upload process.\n  upload() {\n    return this.loader.file.then(\n      (file) =>\n        new Promise((resolve, reject) => {\n          this._initRequest();\n          this._initListeners(resolve, reject, file);\n          this._sendRequest(file);\n        })\n    );\n  }\n\n  // Aborts the upload process.\n  abort() {\n    if (this.xhr) {\n      this.xhr.abort();\n    }\n  }\n\n  // Initializes the XMLHttpRequest object using the URL passed to the constructor.\n  _initRequest() {\n    const xhr = (this.xhr = new XMLHttpRequest());\n\n    // Note that your request may look different. It is up to you and your editor\n    // integration to choose the right communication channel. This example uses\n    // a POST request with JSON as a data structure but your configuration\n    // could be different.\n    xhr.open(\n      \"POST\",\n      `${process.env.REACT_APP_BASIC_SERVER_URL}/api/post/image`,//이부분 고침\n      true\n    );\n    xhr.responseType = \"json\";\n  }\n\n  // Initializes XMLHttpRequest listeners.\n  _initListeners(resolve, reject, file) {\n    const xhr = this.xhr;\n    const loader = this.loader;\n    const genericErrorText = `Couldn't upload file: ${file.name}.`;\n\n    xhr.addEventListener(\"error\", () => reject(genericErrorText));\n    xhr.addEventListener(\"abort\", () => reject());\n    xhr.addEventListener(\"load\", () => {\n      const response = xhr.response;\n\n      // This example assumes the XHR server's \"response\" object will come with\n      // an \"error\" which has its own \"message\" that can be passed to reject()\n      // in the upload promise.\n      //\n      // Your integration may handle upload errors in a different way so make sure\n      // it is done properly. The reject() function must be called when the upload fails.\n      if (!response || response.error) {\n        return reject(\n          response && response.error ? response.error.message : genericErrorText\n        );\n      }\n\n      // If the upload is successful, resolve the upload promise with an object containing\n      // at least the \"default\" URL, pointing to the image on the server.\n      // This URL will be used to display the image in the content. Learn more in the\n      // UploadAdapter#upload documentation.\n      resolve({\n        default: response.url,\n      });\n    });\n\n    // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded\n    // properties which are used e.g. to display the upload progress bar in the editor\n    // user interface.\n    if (xhr.upload) {\n      xhr.upload.addEventListener(\"progress\", (evt) => {\n        if (evt.lengthComputable) {\n          loader.uploadTotal = evt.total;\n          loader.uploaded = evt.loaded;\n        }\n      });\n    }\n  }\n\n  // Prepares the data and sends the request.\n  _sendRequest(file) {\n    // Prepare the form data.\n    const data = new FormData();\n\n    data.append(\"upload\", file);\n\n    // Important note: This is the right place to implement security mechanisms\n    // like authentication and CSRF protection. For instance, you can use\n    // XMLHttpRequest.setRequestHeader() to set the request headers containing\n    // the CSRF token generated earlier by your application.\n\n    // Send the request.\n    this.xhr.send(data);\n  }\n}\n\n// ...\n\nconst Myinit = (editor) => {\n  editor.plugins.get(\"FileRepository\").createUploadAdapter = (loader) => {\n    // Configure the URL to the upload script in your back-end here!\n    return new MyUploadAdapter(loader);\n  };\n};\n\nexport default Myinit;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    Col,\n    Progress,\n} from \"reactstrap\";\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-editor-classic/src/classiceditor\";\nimport { editorConfiguration } from \"../../components/editor/EditorConfig\";\nimport Myinit from \"../../components/editor/UploadAdapter\";\n//import { set } from \"mongoose\";\nimport { POST_UPLOADING_REQUEST } from \"../../redux/types\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst PostWrite = () => {\n    const { isAuthenticated, user } = useSelector((state) => state.auth);  ////store에서 state를 가져온다. 즉, authenticated, user, userRole를 받아온다.\n    const [form, setValues] = useState({ title: \"\", contents: \"\", fileUrl: \"\", creatorName: user.name });// inputstate를 저장할 useState\n    const dispatch = useDispatch();//reducer dispatch\n\n\n    const onSubmit = async (e) => {\n\n        await e.preventDefault();\n        const { title, contents, fileUrl, category, creatorName } = form;\n        const token = localStorage.getItem(\"token\");\n        const body = { title, contents, fileUrl, category, token, creatorName };\n\n\n        dispatch({\n            type: POST_UPLOADING_REQUEST,\n            payload: body,\n        });\n    };\n    const onChange = (e) => { //리액트에서 input을 사용하기 위해서는 이와 같은 과정이 필요하다\n        setValues({\n            ...form,\n            [e.target.name]: e.target.value,//각 인풋의 name을 value값으로 저장함\n        });\n    };\n\n    const getDataFromCKEditor = (event, editor) => {//맨 처음 올린 사진만 보일 수 있도록 하는 세팅\n        const data = editor.getData();//getdata(ckeditor 함수)를 통해 에디터에 올려진 데이터를 가져올 수 있다.\n        console.log(`${data} 데이터 가져옴`);\n\n        if (data && data.match(\"<img src=\")) {//데이터가 존재하고 img src로 시작하는 것이 있다고 하면\n            const whereImg_start = data.indexOf(\"<img src=\");//어디부터 시작하는 지를 살펴보고\n            console.log(`${whereImg_start} 시작값 확인`);\n            let whereImg_end = \"\";\n            let ext_name_find = \"\";\n            let result_Img_Url = \"\";\n\n            const ext_name = [\"jpeg\", \"png\", \"jpg\", \"gif\"];//확장자 이름을 정하고\n\n            for (let i = 0; i < ext_name.length; i++) {\n                if (data.match(ext_name[i])) {//확장자를 살펴보고\n                    console.log(data.indexOf(`${ext_name[i]}`), \"확장자 위치 살펴봄\");\n                    ext_name_find = ext_name[i];//맞는 확장자를 정해준다\n                    whereImg_end = data.indexOf(`${ext_name[i]}`);\n                }\n            }\n            console.log(`확장자 확인 ${ext_name_find}`);\n            console.log(whereImg_end, \"whereImg_end\", \"확장자 위치\");\n\n            if (ext_name_find === \"jpeg\") {\n                result_Img_Url = data.substring(whereImg_start + 10, whereImg_end + 4);\n            } else {\n                result_Img_Url = data.substring(whereImg_start + 10, whereImg_end + 3);\n            }\n            //확장자를 제외한 값을 잘라준다.\n\n            console.log(result_Img_Url, \"이미지 경로\");\n            setValues({\n                ...form,\n                fileUrl: result_Img_Url,\n                contents: data,\n            });//CKeditor의 값 그대로 저장\n        } else {\n            setValues({\n                ...form,\n                fileUrl: process.env.REACT_APP_BASIC_IMAGE_URL,\n                contents: data,\n            });\n        }\n    };\n\n    return (\n        <div>\n            {isAuthenticated ? (\n                <Form onSubmit={onSubmit}>\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"title\">Title</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"title\"\n                            id=\"title\"\n                            className=\"form-control\"\n                            onChange={onChange}\n                        />\n                    </FormGroup>\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"category\">Category</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"category\"\n                            id=\"category\"\n                            className=\"form-control\"\n                            onChange={onChange}\n                        />\n                    </FormGroup>\n                    {/* CKeditor */}\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"content\">Content</Label>\n                        <CKEditor\n                            editor={ClassicEditor}\n                            config={editorConfiguration}\n                            onReady={Myinit}\n                            onBlur={getDataFromCKEditor}\n                        />\n                        <Button\n                            color=\"success\"\n                            block\n                            className=\"mt-3 col-md-2 offset-md-10 mb-3\"\n                        >\n                            제출하기\n                        </Button>\n                    </FormGroup>\n                </Form>\n            ) : (\n                <Col width={50} className=\"p-5 m-5\">\n                    <Progress animated color=\"info\" value={100} />\n                </Col>\n            )}\n        </div>\n    );\n};\n\nexport default PostWrite;","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n    COMMENT_UPLOADING_REQUEST,\r\n    COMMENT_LOADING_REQUEST,\r\n} from \"../../redux/types\";\r\nimport { Form, FormGroup, Input, Button, Row } from \"reactstrap\";\r\n\r\nconst Comments = ({ id, userName, userId }) => {\r\n    const dispatch = useDispatch();\r\n    const [form, setValues] = useState({ contents: \"\" });\r\n\r\n    const onSubmit = async (e) => {\r\n        await e.preventDefault();\r\n        const { contents } = form;\r\n        const token = localStorage.getItem(\"token\");\r\n        const body = {\r\n            contents,\r\n            token,\r\n            id,\r\n            userId,\r\n            userName,\r\n        };\r\n\r\n        console.log(body, \"코맨트 부분 바디\");\r\n        dispatch({\r\n            type: COMMENT_UPLOADING_REQUEST,\r\n            payload: body,\r\n        });\r\n        resetValue.current.value = \"\";\r\n        setValues(\"\");\r\n    };\r\n\r\n    const resetValue = useRef(null);\r\n\r\n    const onChange = (e) => {\r\n        setValues({\r\n            ...form,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n        //console.log(form.contents);\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch({\r\n            type: COMMENT_LOADING_REQUEST,\r\n            payload: id,\r\n        });\r\n    }, [dispatch, id]);\r\n    return (\r\n        <>\r\n            <Form onSubmit={onSubmit}>\r\n                <FormGroup>\r\n                    <Row className=\"p-2\">\r\n                        <div className=\"font-weight-bold m-1\">Make Comment </div>\r\n                        <div className=\"my-1\" />\r\n                        <Input\r\n                            innerRef={resetValue}\r\n                            type=\"textarea\"\r\n                            name=\"contents\"\r\n                            id=\"contents\"\r\n                            onChange={onChange}\r\n                            placeholder=\"Comment\"\r\n                        />\r\n                        <Button\r\n                            color=\"primary\"\r\n                            block\r\n                            className=\"mt-2 offset-md-10 col-md-2 \"\r\n                        >\r\n                            Submit\r\n            </Button>\r\n                    </Row>\r\n                </FormGroup>\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Comments;","import React, { useEffect, Fragment } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Helmet } from \"react-helmet\";\nimport {\n    POST_DETAIL_LOADING_REQUEST,\n    POST_DELETE_REQUEST,\n    USER_LOADING_REQUEST,\n} from \"../../redux/types\";\nimport { Button, Row, Col, Container } from \"reactstrap\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\nimport { GrowingSpinner } from \"../../components/spinner/Spinner\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faPencilAlt,\n    faCommentDots,\n    faMouse,\n} from \"@fortawesome/free-solid-svg-icons\";\n//import BallonEditor from \"@ckeditor/ckeditor5-editor-balloon/src/ballooneditor\";\nimport BalloonEditor from \"@ckeditor/ckeditor5-editor-balloon/src/ballooneditor\";\nimport { editorConfiguration } from \"../../components/editor/EditorConfig\";\nimport Comments from \"../../components/comments/Comments\";\n\nconst PostDetail = (req) => {\n    //console.log(\"포스트 디테일 들어왔는데;;;\")\n    const dispatch = useDispatch();\n    const { postDetail, creatorId, title, loading } = useSelector(\n        (state) => state.post\n    );\n    \n    const location = useLocation();\n    //console.log(testing, \"테스트중입니다.\")\n    const { userId, userName } = useSelector((state) => state.auth);\n    const { comments } = useSelector((state) => state.comment);\n    //console.log(req, \"postdetail req인 부분\");\n    useEffect(() => {\n        // console.log(\"디스패치는 했다고!!!!\")\n        dispatch({\n            type: POST_DETAIL_LOADING_REQUEST,\n            payload: req.match.params.id,\n        });\n        //console.log(\"디스패치는 한번더!!!했다고!!!!\")\n        dispatch({\n            type: USER_LOADING_REQUEST,\n            payload: localStorage.getItem(\"token\"),\n            \n        });\n        \n    }, []);\n\n    const onDeleteClick = () => {\n        dispatch({\n            type: POST_DELETE_REQUEST,\n            payload: {\n                id: req.match.params.id,\n                token: localStorage.getItem(\"token\"),\n            },\n        });\n    };\n    console.log(location,\"로케이ㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣㅣ션\");\n    \n    console.log(postDetail, \"포스트 디테일 확인하는 부분\");\n    const EditButton = (\n        <Fragment>\n            <Row className=\"d-flex justify-content-center pb-3\">\n                <Col className=\"col-md-3 mr-md-3\">\n                    <Link to=\"/\" className=\"btn btn-primary btn-block\">\n                        Home\n          </Link>\n                </Col>\n                <Col className=\"col-md-3 mr-md-3\">\n                    <Link\n                        to={`/post/${req.match.params.id}/edit`}\n                        className=\"btn btn-success btn-block\"\n                    >\n                        Edit Post\n          </Link>\n                </Col>\n                <Col className=\"col-md-3\">\n                    <Button className=\"btn-block btn-danger\" onClick={onDeleteClick}>\n                        Delete\n          </Button>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n\n    const HomeButton = (\n        <Fragment>\n            <Row className=\"d-flex justify-content-center pb-3\">\n                <Col className=\"col-sm-12 com-md-3\">\n                    <Link to=\"/\" className=\"btn btn-primary btn-block\">\n                        Home\n          </Link>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n\n    const Body = (\n        //console.log(\"디테일의 바디부분!@!ㅉㅇㅃㅉㅇ\")\n        <>\n            {userId === creatorId ? EditButton : HomeButton}\n            <Row className=\"border-bottom border-top border-primary p-3 mb-3 d-flex justify-content-between\">\n                {(() => {\n                    if (postDetail && postDetail.creator) {\n                        return (\n                            <Fragment>\n                                <div className=\"font-weight-bold text-big\">\n                                    <span className=\"mr-3\">\n                                        <Button color=\"info\">\n                                            {postDetail.category.categoryName}\n                                        </Button>\n                                    </span>\n                                    {postDetail.title}\n                                </div>\n                                <div className=\"align-self-end\">{postDetail.creator.name}</div>\n                            </Fragment>\n                        );\n                    }\n                })()}\n            </Row>\n            {postDetail && postDetail.comments ? (\n                <Fragment>\n                    <div className=\"d-flex justify-content-end align-items-baseline small\">\n                        <FontAwesomeIcon icon={faPencilAlt} />\n            &nbsp;\n            <span> {postDetail.date}</span>\n            &nbsp;&nbsp;\n            <FontAwesomeIcon icon={faCommentDots} />\n            &nbsp;\n            <span>{postDetail.comments.length}</span>\n            &nbsp;&nbsp;\n            <FontAwesomeIcon icon={faMouse} />\n                        <span>{postDetail.views}</span>\n                    </div>\n                    <Row className=\"mb-3\">\n                        <CKEditor\n                            editor={BalloonEditor}\n                            data={postDetail.contents}\n                            config={editorConfiguration}\n                            disabled=\"true\"\n                        />\n                    </Row>\n                    <Row>\n                        <Container className=\"mb-3 border border-blue rounded\">\n                            {Array.isArray(comments)\n                                ? comments.map(\n                                    ({ contents, creator, date, _id, creatorName }) => (\n                                        <div key={_id}>\n                                            <Row className=\"justify-content-between p-2\">\n                                                <div className=\"font-weight-bold\">\n                                                    {creatorName ? creatorName : creator}\n                                                </div>\n                                                <div className=\"text-small\">\n                                                    <span className=\"font-weight-bold\">\n                                                        {date.split(\" \")[0]}\n                                                    </span>\n                                                    <span className=\"font-weight-light\">\n                                                        {\" \"}\n                                                        {date.split(\" \")[1]}\n                                                    </span>\n                                                </div>\n                                            </Row>\n                                            <Row className=\"p-2\">\n                                                <div>{contents}</div>\n                                            </Row>\n                                            <hr />\n                                        </div>\n                                    )\n                                )\n                                : \"Creator\"}\n                            <Comments\n                                id={req.match.params.id}\n                                userId={userId}\n                                userName={userName}\n                            />\n                        </Container>\n                    </Row>\n                </Fragment>\n            ) : (\n                    <h1>hi</h1>\n                )}\n        </>\n    );\n\n    //    console.log(comments, \"Comments\");\n    return (\n        <div>\n            <Helmet title={`Post | ${title}`} />\n            {loading === true ? GrowingSpinner : Body}\n        </div>\n    );\n};\n\nexport default PostDetail;","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { SEARCH_REQUEST } from \"../../redux/types\";\nimport { Row } from \"reactstrap\";\nimport PostCardOne from \"../../components/post/PostCardOne\";\n\nconst Search = () => {\n    const dispatch = useDispatch();\n    let { searchTerm } = useParams();\n    const { searchResult } = useSelector((state) => state.post);\n\n    console.log(searchResult, \"useParams\");\n\n    useEffect(() => {\n        if (searchTerm) {\n            dispatch({\n                type: SEARCH_REQUEST,\n                payload: searchTerm,\n            });\n        }\n    }, [dispatch, searchTerm]);\n\n    return (\n        <div>\n            <h1>검색결과: \"{searchTerm}\"</h1>\n            <Row>\n                <PostCardOne posts={searchResult} />\n            </Row>\n        </div>\n    );\n};\n\nexport default Search;","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    Col,\n    Progress,\n} from \"reactstrap\";\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-editor-classic/src/classiceditor\";\nimport { editorConfiguration } from \"../../components/editor/EditorConfig\";\nimport Myinit from \"../../components/editor/UploadAdapter\";\nimport { POST_EDIT_UPLOADING_REQUEST } from \"../../redux/types\";\n\nconst PostEdit = () => {\n    const { isAuthenticated } = useSelector((state) => state.auth);\n    const [form, setValues] = useState({ title: \"\", contents: \"\", fileUrl: \"\" });\n    const { postDetail } = useSelector((state) => state.post);\n    const dispatch = useDispatch();\n\n    const onSubmit = async (e) => {\n        await e.preventDefault();\n        const { title, contents, fileUrl } = form;\n        const token = localStorage.getItem(\"token\");\n        const id = postDetail._id;\n        const body = { title, contents, fileUrl, token, id };\n        console.log(body);\n        dispatch({\n            type: POST_EDIT_UPLOADING_REQUEST,\n            payload: body,\n        });\n    };\n\n    const onChange = (e) => {\n        setValues({\n            ...form,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    useEffect(() => {\n        setValues({\n            title: postDetail.title,\n            contents: postDetail.contents,\n            fileUrl: postDetail.fileUrl,\n        });\n    }, [postDetail.title, postDetail.contents, postDetail.fileUrl]);\n\n    const getDataFromCKEditor = (event, editor) => {\n        const data = editor.getData();\n        console.log(data);\n\n        if (data && data.match(\"<img src=\")) {\n            const whereImg_start = data.indexOf(\"<img src=\");\n            console.log(whereImg_start);\n            let whereImg_end = \"\";\n            let ext_name_find = \"\";\n            let result_Img_Url = \"\";\n\n            const ext_name = [\"jpeg\", \"png\", \"jpg\", \"gif\"];\n\n            for (let i = 0; i < ext_name.length; i++) {\n                if (data.match(ext_name[i])) {\n                    console.log(data.indexOf(`${ext_name[i]}`));\n                    ext_name_find = ext_name[i];\n                    whereImg_end = data.indexOf(`${ext_name[i]}`);\n                }\n            }\n            console.log(ext_name_find);\n            console.log(whereImg_end);\n\n            if (ext_name_find === \"jpeg\") {\n                result_Img_Url = data.substring(whereImg_start + 10, whereImg_end + 4);\n            } else {\n                result_Img_Url = data.substring(whereImg_start + 10, whereImg_end + 3);\n            }\n\n            console.log(result_Img_Url, \"result_Img_Url\");\n            setValues({\n                ...form,\n                fileUrl: result_Img_Url,\n                contents: data,\n            });\n        } else {\n            setValues({\n                ...form,\n                fileUrl: process.env.REACT_APP_BASIC_IMAGE_URL,\n                contents: data,\n            });\n        }\n    };\n\n    return (\n        <div>\n            {isAuthenticated ? (\n                <Form onSubmit={onSubmit}>\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"title\">Title</Label>\n                        <Input\n                            defaultValue={postDetail.title}\n                            type=\"text\"\n                            name=\"title\"\n                            id=\"title\"\n                            className=\"form-control\"\n                            onChange={onChange}\n                        />\n                    </FormGroup>\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"content\">Content</Label>\n                        <CKEditor\n                            editor={ClassicEditor}\n                            config={editorConfiguration}\n                            data={postDetail.contents}\n                            onReady={Myinit}\n                            onBlur={getDataFromCKEditor}\n                        />\n                        <Button\n                            color=\"success\"\n                            block\n                            className=\"mt-3 col-md-2 offset-md-10 mb-3\"\n                        >\n                            제출하기\n            </Button>\n                    </FormGroup>\n                </Form>\n            ) : (\n                    <Col width={50} className=\"p-5 m-5\">\n                        <Progress animated color=\"info\" value={100} />\n                    </Col>\n                )}\n        </div>\n    );\n};\n\nexport default PostEdit;","import React, { useState, Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  CLEAR_ERROR_REQUEST,\n  PASSWORD_EDIT_UPLOADING_REQUEST,\n} from \"../../redux/types\";\nimport Helmet from \"react-helmet\";\nimport {\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\n\nconst Profile = () => {\n  const { userId, errorMsg, successMsg, previousMatchMsg } = useSelector(\n    (state) => state.auth\n  );\n  const { userName } = useParams();\n  const [form, setValues] = useState({\n    previousPassword: \"\",\n    password: \"\",\n    rePassword: \"\",\n  });\n  const dispatch = useDispatch();\n  const onChange = (e) => {\n    setValues({\n      ...form,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const onSubmit = async (e) => {\n    await e.preventDefault();\n    const { previousPassword, password, rePassword } = form;\n    const token = localStorage.getItem(\"token\");\n\n    const body = {\n      password,\n      token,\n      previousPassword,\n      rePassword,\n      userId,\n      userName,\n    };\n\n    dispatch({\n      type: CLEAR_ERROR_REQUEST,\n    });\n    dispatch({\n      type: PASSWORD_EDIT_UPLOADING_REQUEST,\n      payload: body,\n    });\n  };\n\n  return (\n    <Fragment>\n      <Helmet title={`Profile | ${userName}님의 프로필`} />\n      <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n        <Card>\n          <CardHeader>\n            <strong>Edit Password</strong>\n          </CardHeader>\n          <CardBody>\n            <Form onSubmit={onSubmit}>\n              <FormGroup>\n                <Label for=\"title\">기존 비밀번호</Label>\n                <Input\n                  type=\"password\"\n                  name=\"previousPassword\"\n                  id=\"previousPassword\"\n                  className=\"form-control mb-2\"\n                  onChange={onChange}\n                />\n                {previousMatchMsg ? (\n                  <Alert color=\"danger\">{previousMatchMsg}</Alert>\n                ) : (\n                    \"\"\n                  )}\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"title\">새로운 비밀번호</Label>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  className=\"form-control\"\n                  onChange={onChange}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"title\">비밀번호 확인</Label>\n                <Input\n                  type=\"password\"\n                  name=\"rePassword\"\n                  id=\"rePassword\"\n                  className=\"form-control mb-2\"\n                  onChange={onChange}\n                />\n                {errorMsg ? <Alert color=\"danger\">{errorMsg}</Alert> : \"\"}\n              </FormGroup>\n              <Button\n                color=\"success\"\n                block\n                className=\"mt-4 mb-4 col-md-3 offset-9\"\n              >\n                제출하기\n              </Button>\n              {successMsg ? <Alert color=\"success\">{successMsg}</Alert> : \"\"}\n            </Form>\n          </CardBody>\n        </Card>\n      </Col>\n    </Fragment>\n  );\n};\n\nexport default Profile;","import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    Col,\n    Progress,\n} from \"reactstrap\";\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-editor-classic/src/classiceditor\";\nimport { editorConfiguration } from \"../../components/editor/EditorConfig\";\nimport Myinit from \"../../components/editor/UploadAdapter\";\n//import { set } from \"mongoose\";\nimport { POST_UPLOADING_REQUEST } from \"../../redux/types\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst ListWrite = () => {\n\n    let { categoryName } = useParams();\n    const { isAuthenticated, user } = useSelector((state) => state.auth);  ////store에서 state를 가져온다. 즉, authenticated, user, userRole를 받아온다.\n    console.log(user, \"유저 네임 확인중\")\n    // if(user.name === undefined) {user.name = \"비회원\"}\n    const [form, setValues] = useState({ title: \"\", contents: \"\", fileUrl: \"\", creatorName: \"\" });// inputstate를 저장할 useState\n    const dispatch = useDispatch();//reducer dispatch\n    const onSubmit = async (e) => {\n        await e.preventDefault();\n        const { title, contents, fileUrl } = form;\n        var creatorName = \"\";\n        if (user == undefined){\n            // console.log(form,\"form 콘솔로깅\")\n            creatorName = \"비회원\";\n        }\n        else {\n            creatorName = user.name;\n        }\n        const category = categoryName\n        const token = localStorage.getItem(\"token\");\n        const body = { title, contents, fileUrl, category, token, creatorName };\n        console.log(body, \"바디확인용\")\n        dispatch({\n            type: POST_UPLOADING_REQUEST,\n            payload: body,\n        });\n    };\n    const onChange = (e) => { //리액트에서 input을 사용하기 위해서는 이와 같은 과정이 필요하다\n        setValues({\n            ...form,\n            [e.target.name]: e.target.value,//각 인풋의 name을 value값으로 저장함\n        });\n    };\n\n    const getDataFromCKEditor = (event, editor) => {//맨 처음 올린 사진만 보일 수 있도록 하는 세팅\n        const data = editor.getData();//getdata(ckeditor 함수)를 통해 에디터에 올려진 데이터를 가져올 수 있다.\n        console.log(`${data} 데이터 가져옴`);\n\n        if (data && data.match(\"<img src=\")) {//데이터가 존재하고 img src로 시작하는 것이 있다고 하면\n            const whereImg_start = data.indexOf(\"<img src=\");//어디부터 시작하는 지를 살펴보고\n            console.log(`${whereImg_start} 시작값 확인`);\n            let whereImg_end = \"\";\n            let ext_name_find = \"\";\n            let result_Img_Url = \"\";\n\n            const ext_name = [\"jpeg\", \"png\", \"jpg\", \"gif\"];//확장자 이름을 정하고\n\n            for (let i = 0; i < ext_name.length; i++) {\n                if (data.match(ext_name[i])) {//확장자를 살펴보고\n                    console.log(data.indexOf(`${ext_name[i]}`), \"확장자 위치 살펴봄\");\n                    ext_name_find = ext_name[i];//맞는 확장자를 정해준다\n                    whereImg_end = data.indexOf(`${ext_name[i]}`);\n                }\n            }\n            console.log(`확장자 확인 ${ext_name_find}`);\n            console.log(whereImg_end, \"whereImg_end\", \"확장자 위치\");\n\n            if (ext_name_find === \"jpeg\") {\n                result_Img_Url = data.substring(whereImg_start + 10, whereImg_end + 4);\n            } else {\n                result_Img_Url = data.substring(whereImg_start + 10, whereImg_end + 3);\n            }\n            //확장자를 제외한 값을 잘라준다.\n\n            console.log(result_Img_Url, \"이미지 경로\");\n            setValues({\n                ...form,\n                fileUrl: result_Img_Url,\n                contents: data,\n            });//CKeditor의 값 그대로 저장\n        } else {\n            setValues({\n                ...form,\n                fileUrl: process.env.REACT_APP_BASIC_IMAGE_URL,\n                contents: data,\n            });\n        }\n    };\n\n    console.log(categoryName, \"카테고리 네임 확인용\")\n\n    return (\n        <div>\n            {isAuthenticated ? (\n                <Form onSubmit={onSubmit}>\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"title\">Title</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"title\"\n                            id=\"title\"\n                            className=\"form-control\"\n                            onChange={onChange}\n                        />\n                    </FormGroup>\n                    {/* CKeditor */}\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"content\">Content</Label>\n                        <CKEditor\n                            editor={ClassicEditor}\n                            config={editorConfiguration}\n                            onReady={Myinit}\n                            onBlur={getDataFromCKEditor}\n                        />\n                        <Button\n                            color=\"success\"\n                            block\n                            className=\"mt-3 col-md-2 offset-md-10 mb-3\"\n                        >\n                            제출하기\n                        </Button>\n                    </FormGroup>\n                </Form>\n            ) : (\n                <div className = \"only_club\">정회원만 작성 가능합니다.</div>\n                )}\n        </div>\n    );\n};\n\nexport default ListWrite;","import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n    Col,\n    Progress,\n} from \"reactstrap\";\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-editor-classic/src/classiceditor\";\nimport { editorConfiguration } from \"../../components/editor/EditorConfig\";\nimport Myinit from \"../../components/editor/UploadAdapter\";\n//import { set } from \"mongoose\";\nimport { POST_UPLOADING_REQUEST_VISITOR } from \"../../redux/types\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst ListWrite_visitor = () => {\n\n    let { categoryName } = useParams();\n    const { isAuthenticated, user } = useSelector((state) => state.auth);  ////store에서 state를 가져온다. 즉, authenticated, user, userRole를 받아온다.\n    console.log(user, \"유저 네임 확인중\")\n    // if(user.name === undefined) {user.name = \"비회원\"}\n    const [form, setValues] = useState({ title: \"\", contents: \"\", fileUrl: \"\", creatorName: \"\" });// inputstate를 저장할 useState\n    const dispatch = useDispatch();//reducer dispatch\n    const onSubmit = async (e) => {\n        await e.preventDefault();\n        const { title, contents, fileUrl } = form;\n        var creatorName = \"\";\n        if (user == undefined){\n            // console.log(form,\"form 콘솔로깅\")\n            creatorName = \"비회원\";\n        }\n        else {\n            creatorName = user.name;\n        }\n        const category = categoryName\n        const token = localStorage.getItem(\"token\");\n        const body = { title, contents, fileUrl, category, token, creatorName };\n        console.log(body, \"바디확인용\")\n        dispatch({\n            type: POST_UPLOADING_REQUEST_VISITOR,\n            payload: body,\n        });\n    };\n    const onChange = (e) => { //리액트에서 input을 사용하기 위해서는 이와 같은 과정이 필요하다\n        setValues({\n            ...form,\n            [e.target.name]: e.target.value,//각 인풋의 name을 value값으로 저장함\n        });\n    };\n\n    const getDataFromCKEditor = (event, editor) => {//맨 처음 올린 사진만 보일 수 있도록 하는 세팅\n        const data = editor.getData();//getdata(ckeditor 함수)를 통해 에디터에 올려진 데이터를 가져올 수 있다.\n        console.log(`${data} 데이터 가져옴`);\n\n        if (data && data.match(\"<img src=\")) {//데이터가 존재하고 img src로 시작하는 것이 있다고 하면\n            const whereImg_start = data.indexOf(\"<img src=\");//어디부터 시작하는 지를 살펴보고\n            console.log(`${whereImg_start} 시작값 확인`);\n            let whereImg_end = \"\";\n            let ext_name_find = \"\";\n            let result_Img_Url = \"\";\n\n            const ext_name = [\"jpeg\", \"png\", \"jpg\", \"gif\"];//확장자 이름을 정하고\n\n            for (let i = 0; i < ext_name.length; i++) {\n                if (data.match(ext_name[i])) {//확장자를 살펴보고\n                    console.log(data.indexOf(`${ext_name[i]}`), \"확장자 위치 살펴봄\");\n                    ext_name_find = ext_name[i];//맞는 확장자를 정해준다\n                    whereImg_end = data.indexOf(`${ext_name[i]}`);\n                }\n            }\n            console.log(`확장자 확인 ${ext_name_find}`);\n            console.log(whereImg_end, \"whereImg_end\", \"확장자 위치\");\n\n            if (ext_name_find === \"jpeg\") {\n                result_Img_Url = data.substring(whereImg_start + 10, whereImg_end + 4);\n            } else {\n                result_Img_Url = data.substring(whereImg_start + 10, whereImg_end + 3);\n            }\n            //확장자를 제외한 값을 잘라준다.\n\n            console.log(result_Img_Url, \"이미지 경로\");\n            setValues({\n                ...form,\n                fileUrl: result_Img_Url,\n                contents: data,\n            });//CKeditor의 값 그대로 저장\n        } else {\n            setValues({\n                ...form,\n                fileUrl: process.env.REACT_APP_BASIC_IMAGE_URL,\n                contents: data,\n            });\n        }\n    };\n\n    console.log(categoryName, \"카테고리 네임 확인용\")\n\n    return (\n        <div>\n            {isAuthenticated ? (\n                <Form onSubmit={onSubmit}>\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"title\">Title</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"title\"\n                            id=\"title\"\n                            className=\"form-control\"\n                            onChange={onChange}\n                        />\n                    </FormGroup>\n                    {/* CKeditor */}\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"content\">Content</Label>\n                        <CKEditor\n                            editor={ClassicEditor}\n                            config={editorConfiguration}\n                            onReady={Myinit}\n                            onBlur={getDataFromCKEditor}\n                        />\n                        <Button\n                            color=\"success\"\n                            block\n                            className=\"mt-3 col-md-2 offset-md-10 mb-3\"\n                        >\n                            제출하기\n                        </Button>\n                    </FormGroup>\n                </Form>\n            ) : (\n                \n                <Form onSubmit={onSubmit}>\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"title\">Title</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"title\"\n                            id=\"title\"\n                            className=\"form-control\"\n                            onChange={onChange}\n                        />\n                    </FormGroup>\n                    {/* CKeditor */}\n                    <FormGroup className=\"mb-3\">\n                        <Label for=\"content\">Content</Label>\n                        <CKEditor\n                            editor={ClassicEditor}\n                            config={editorConfiguration}\n                            onReady={Myinit}\n                            onBlur={getDataFromCKEditor}\n                        />\n                        <Button\n                            color=\"success\"\n                            block\n                            className=\"mt-3 col-md-2 offset-md-10 mb-3\"\n                        >\n                            제출하기\n                        </Button>\n                    </FormGroup>\n                </Form>\n                    // <Col width={50} className=\"p-5 m-5\">\n                    //     <Progress animated color=\"info\" value={100} />\n                    // </Col>\n                )}\n        </div>\n    );\n};\n\nexport default ListWrite_visitor;","import React, { Component } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nexport const EditProtectedRoute = ({ component: Component, ...rest }) => {\r\n    const { userId } = useSelector((state) => state.auth);\r\n    const { creatorId } = useSelector((state) => state.post);\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => {\r\n                if (userId === creatorId) {\r\n                    return <Component {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/\",\r\n                                state: {\r\n                                    from: props.location,\r\n                                },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nexport const ProfileProtectedRoute = ({ component: Component, ...rest }) => {\r\n    const { userName } = useSelector((state) => state.auth);\r\n    console.log(userName);\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => {\r\n                if (props.match.params.userName === userName) {\r\n                    return <Component {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/\",\r\n                                state: {\r\n                                    from: props.location,\r\n                                },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\n\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { CATEGORY_FIND_REQUEST, POSTS_WRITE_REQUEST } from \"../../redux/types\";\r\nimport PostCardOne from \"../../components/post/PostCardOne\";\r\nimport { Row } from \"reactstrap\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport Listdetail from \"../../components/list/Listdetail\"\r\nimport { Link } from \"react-router-dom\";\r\nimport Pagination from \"../../components/list/Pagination\"\r\nimport {\r\n    Navbar,\r\n    Container,\r\n    NavbarToggler,\r\n    Collapse,\r\n    Nav,\r\n    NavItem,\r\n    Form,\r\n    Button,\r\n} from \"reactstrap\";\r\n\r\n\r\n\r\nconst List = () => {\r\n\r\n\r\n    const addPostClick = () => {\r\n        console.log(\"POSTS_WRITE_REQUEST\")\r\n        dispatch({\r\n            type: POSTS_WRITE_REQUEST,\r\n            payload: categoryName\r\n        });\r\n    };\r\n\r\n    let { categoryName } = useParams();\r\n    // console.log(categoryName,\"카테고리 네임의 파아ㅏㅏㅏㅏㅏㅏㅏㅏㅏ람\");\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postsPerPage, setPostsPerPage] = useState(5)\r\n    const { posts, categoryFindResult, loading, postCount } = useSelector(\r\n        (state) => state.post\r\n    );//값들을 다 받았음\r\n\r\n    let listing = categoryFindResult.posts//.reverse()\r\n    if (listing === undefined) { listing = [0] }\r\n    const dispatch = useDispatch();\r\n    const indexOfLast = currentPage * postsPerPage;\r\n    const indexOfFirst = indexOfLast - postsPerPage;\r\n    let totalpage = 0;\r\n\r\n\r\n    totalpage = Math.ceil(listing.length / postsPerPage);\r\n\r\n\r\n    function currentPosts(tmp) {\r\n        console.log(\"currentPosts가 작동중\")\r\n        let currentPosts = 0;\r\n        console.log(currentPage, \"currentPage\", totalpage, \"totalpage\")\r\n\r\n        if (currentPage < 1) { setCurrentPage(1) }\r\n\r\n        else if ((currentPage > totalpage) && totalpage !== 0) {\r\n            console.log(currentPage, \"currentPage\", totalpage, \"totalpage\")\r\n            setCurrentPage(totalpage)\r\n        }\r\n        currentPosts = tmp.slice(indexOfFirst, indexOfLast);\r\n        return currentPosts;\r\n    }\r\n\r\n\r\n    // console.log(categoryFindResult);\r\n    // console.log(categoryName);\r\n    // console.log(categoryFindResult.posts, \"포스트\")\r\n    // console.log(posts, \"포스트\")\r\n    // console.log(listing, \"listing\")\r\n    // console.log(currentPage)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch({\r\n            type: CATEGORY_FIND_REQUEST,\r\n            payload: categoryName,\r\n        });\r\n    }, [dispatch, categoryName]);\r\n\r\n\r\n    if (listing) {\r\n        // console.log(totalpage, \"여기인가\")\r\n\r\n        // listing = listing.reverse();\r\n        return (\r\n\r\n            <Fragment>\r\n                <Button className=\"mb-3\" color=\"info\">\r\n                    {categoryName}\r\n                </Button>\r\n\r\n                <div className=\"border-black border-5\">\r\n                    <Helmet title=\"testing\" />\r\n                    <Listdetail posts={currentPosts(listing)}> </Listdetail>\r\n                    <Pagination postsPerPage={postsPerPage} totalPosts={listing.length} paginate={setCurrentPage} currentPage={currentPage}> </Pagination>\r\n                </div>\r\n                {(categoryName == \"손님게시판\") ? \r\n                    <Form className=\"col mt-2 mb-5\">\r\n                        <Link\r\n                            to={`/post/list/${categoryName}/postvisitor`}\r\n                            className=\"btn btn_color block text-white px-3\"\r\n                            onClick={addPostClick}\r\n                        >\r\n                                   손님게시판 Add Post\r\n                        </Link>\r\n                    </Form>:\r\n                    <Form className=\"col mt-2 mb-5\">\r\n                        <Link\r\n                            to={`/post/list/${categoryName}/post`}\r\n                            className=\"btn btn_color block text-white px-3\"\r\n                            onClick={addPostClick}\r\n                        >\r\n                         Add Post\r\n                        </Link>\r\n                    </Form>\r\n                }\r\n            </Fragment>\r\n        );\r\n    }\r\n    else return (<div></div>)\r\n};\r\n\r\nexport default List;","import React, { useState, useEffect, Fragment } from \"react\";\nimport { Container } from \"reactstrap\";\nimport { useLocation, Switch, Route, Redirect } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport \"./css/reset.css\";\nimport \"./css/style.css\";\n// import {velocity} from \"velocity-react\"\n// import \"./js/velocity.min.js\"\n// import \"./js/velocity.ui.min.js\"\n// import \"./js/jquery-2.1.4.js\"\n// import \"./js/modernizr.js\"\n// import \"./js/main.js\"\nimport jQuery from \"jquery\"\n\n\n\nwindow.$ = window.jQuery = jQuery;\n\n\nconst Main = () => {\n    const [counter, setCounter] = useState(0);\n\n    \n    // console.log();\n    useEffect(() => {\n        // setCounter(counter + 1);\n        let localNum = localStorage.getItem('counter')\n        console.log(localNum,\"로컬넘버 확인용\");\n        \n        if (localNum == undefined){\n        localStorage.setItem('counter', 1)\n        console.log(localNum,\"로컬넘버 생성 1로\");\n        }\n        else if(localNum == 0)\n        {\n            localNum = 1;\n            localStorage.setItem('counter', 1)\n            console.log(localNum,\"로컬넘버 1이 됨\");\n        }\n        else {\n            localNum = 0;\n            localStorage.setItem('counter', 0)\n            console.log(localNum,\"로컬넘버 새로고침, 0이됨\");\n            window.location.reload();\n        }\n        console.log(\"매인 리 렌더링 되는지 확인중입니다. 카운터의 값은?\", counter)\n    }, []);\n\n\n\n\n\n\n    \n    return (\n        <Fragment>\n            <div className = \"testing_main\" data-hijacking = \"on\" data-animation =\"rotate\">\n            <section className=\"cd-section visible sa1\">\n                <div>\n                    <h2>MAZE에 오신 것을 환영합니다.</h2>\n                </div>\n            </section>\n\n            <section className=\"cd-section  sa2\">\n                <div>\n                    <h2>Section 2</h2>\n                </div>\n            </section>\n\n            <section className=\"cd-section sa3\">\n                <div>\n                    <h2>Section 3</h2>\n                </div>\n            </section>\n\n            <section className=\"cd-section sa4\">\n                <div>\n                    <h2>Section 4</h2>\n                </div>\n            </section>\n\n            <section className=\"cd-section sa5\">\n                <div>\n                    <h2>Section 5</h2>\n                </div>\n            </section>\n\n            <nav>\n                <ul className=\"cd-vertical-nav\">\n                    <li><a href=\"#0\" className=\"cd-prev inactive\">Next</a></li>\n                    <li><a href=\"#0\" className=\"cd-next\">Prev</a></li>\n                </ul>\n            </nav>\n            \n            <div className=\"refresh_plz\">메인 화면을 보기 위해서는 새로고침을 해 주세요!</div>\n            </div>\n        </Fragment>\n    )\n};\n\nexport default Main;","import React, { Fragment } from \"react\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport AppNavbar from \"../components/AppNavbar\";\nimport bigList from \"../components/list/bigList\";\nimport { Container } from \"reactstrap\";\nimport { useLocation ,Switch, Route, Redirect } from \"react-router-dom\";\nimport PostCardList from \"./normalRoute/PostCardList\";\nimport PostWrite from \"./normalRoute/PostWrite\";\nimport PostDetail from \"./normalRoute/PostDetail\";\nimport Search from \"./normalRoute/Search\";\nimport CategoryResult from \"./normalRoute/CategoryResult\";\nimport PostEdit from \"./normalRoute/PostEdit\";\nimport Profile from \"./normalRoute/Profile\";\nimport ListWrite from \"./normalRoute/ListWrite\";\nimport ListWrite_visitor from \"./normalRoute/ListWrite_visitor\";\nimport {\n  EditProtectedRoute,\n  ProfileProtectedRoute,\n} from \"./protectedRoute/ProtectedRoute\";\nimport List from \"./normalRoute/List\";\nimport Main from \"../components/Main_page/Main.js\";\n\nconst MyRouter = () => (\n\n\n\n  <Fragment>\n    <div className=\"body\">\n      <AppNavbar />\n      {/* <Header /> */}\n      <div id=\"main-body\" className = \"main_body_div\">\n        <Switch>\n          <Route path=\"/\" exact component={Main} />\n          <Route path=\"/post\" exact component={PostWrite} />\n          <Route path=\"/post/:id\" exact component={PostDetail} />\n          <Route path=\"/test\" exact component={PostCardList} />\n          <EditProtectedRoute path=\"/post/:id/edit\" exact component={PostEdit} />\n          {/* \n        <Route\n          path=\"/post/list/:categoryName\"\n          exact\n          component={CategoryResult}\n        /> */}\n\n          <Route\n            path=\"/post/list/:categoryName\"\n            exact component={List}\n          />\n          <Route path=\"/search/:searchTerm\" exact component={Search} />\n\n          <Route path=\"/post/list/:categoryName/post\" exact component={ListWrite} />\n          <Route path=\"/post/list/:categoryName/postvisitor\" exact component={ListWrite_visitor} />\n\n          <Route path=\"/test2\" exact component={List} />\n          <ProfileProtectedRoute\n            path=\"/user/:userName/profile\"\n            exact component={Profile}\n          />\n          <Redirect from=\"*\" to=\"/main\" />\n        </Switch>\n      </div>\n      {/* <Footer /> */}\n    </div>\n  </Fragment>\n);\n\nexport default MyRouter;","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport store, { history } from \"./store\";\nimport MyRouter from \"./routes/Router\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./assets/custom.scss\";\nconst App = () => {\n  return (\n    <Provider store={store}>\n      {/* provider을 통하여 store에 연결 가능 App 컴포넌트는 Store에 접근한다. */}\n      <ConnectedRouter history={history}>\n        {/* history를 받아올 수 있다. */}\n        <MyRouter />\n      </ConnectedRouter>\n    </Provider>\n  );\n};\n\nexport default App;\n","import store from '../../store'\r\nimport { USER_LOADING_REQUEST } from '../../redux/types'\r\n\r\nconst loadUser = () => {\r\n    try {\r\n        store.dispatch({\r\n            type: USER_LOADING_REQUEST,\r\n            payload: localStorage.getItem(\"token\")\r\n        });\r\n        console.log(store,\"스토어에 대해서\");\r\n        // console.log(payload,\"패이로드란\");\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n\r\n}\r\n\r\nexport default loadUser","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport loadUser from \"./components/auth/loadUser\";\n\nloadUser();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}